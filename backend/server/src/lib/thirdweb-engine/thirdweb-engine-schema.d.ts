/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/json": {
    get: {
      responses: {
        /** @description Default Response */
        200: {
          content: never;
        };
      };
    };
  };
  "/backend-wallet/create": {
    /**
     * Create backend wallet
     * @description Create a backend wallet.
     */
    post: operations["create"];
  };
  "/backend-wallet/import": {
    /**
     * Import backend wallet
     * @description Import an existing wallet as a backend wallet.
     */
    post: operations["import"];
  };
  "/backend-wallet/update": {
    /**
     * Update backend wallet
     * @description Update a backend wallet.
     */
    post: operations["update"];
  };
  "/backend-wallet/{chain}/{walletAddress}/get-balance": {
    /**
     * Get balance
     * @description Get the native balance for a backend wallet.
     */
    get: operations["getBalance"];
  };
  "/backend-wallet/get-all": {
    /**
     * Get all backend wallets
     * @description Get all backend wallets.
     */
    get: operations["getAll"];
  };
  "/backend-wallet/{chain}/transfer": {
    /**
     * Transfer tokens
     * @description Transfer native or ERC20 tokens from this wallet to another wallet
     */
    post: operations["transfer"];
  };
  "/backend-wallet/{chain}/withdraw": {
    /**
     * Withdraw all funds
     * @description Withdraw all funds from this wallet to another wallet
     */
    post: operations["withdraw"];
  };
  "/backend-wallet/{chain}/send-transaction": {
    /**
     * Send a transaction
     * @description Send a transaction with transaction parameters
     */
    post: operations["sendTransaction"];
  };
  "/backend-wallet/{chain}/send-transaction-batch": {
    /**
     * Send a batch of raw transactions
     * @description Send a batch of raw transactions with transaction parameters
     */
    post: operations["sendTransactionBatch"];
  };
  "/backend-wallet/sign-transaction": {
    /**
     * Sign a transaction
     * @description Sign a transaction
     */
    post: operations["signTransaction"];
  };
  "/backend-wallet/sign-message": {
    /**
     * Sign a message
     * @description Send a message
     */
    post: operations["signMessage"];
  };
  "/backend-wallet/sign-typed-data": {
    /**
     * Sign an EIP-712 message
     * @description Send an EIP-712 message ("typed data")
     */
    post: operations["signTypedData"];
  };
  "/backend-wallet/{chain}/{walletAddress}/get-all-transactions": {
    /**
     * Get all transactions
     * @description Get all transactions for a backend wallet.
     */
    get: operations["getAllTransactions"];
  };
  "/backend-wallet/reset-nonces": {
    /**
     * Reset all nonces
     * @description Reset nonces for all backend wallets. This is for debugging purposes and does not impact held tokens.
     */
    post: operations["resetNonces"];
  };
  "/backend-wallet/{chain}/{walletAddress}/get-nonce": {
    /**
     * Get backend-wallet nonces from DB
     * @description Get nonce for a backend wallets from DB. This is for debugging purposes and does not impact held tokens.
     */
    get: operations["getNonce"];
  };
  "/backend-wallet/{chain}/simulate-transaction": {
    /**
     * Simulate a transaction
     * @description Simulate a transaction with transaction parameters
     */
    post: operations["simulateTransaction"];
  };
  "/configuration/wallets": {
    /**
     * Get wallets configuration
     * @description Get wallets configuration
     */
    get: operations["getWalletsConfiguration"];
    /**
     * Update wallets configuration
     * @description Update wallets configuration
     */
    post: operations["updateWalletsConfiguration"];
  };
  "/configuration/chains": {
    /**
     * Get chain overrides configuration
     * @description Get chain overrides configuration
     */
    get: operations["getChainsConfiguration"];
    /**
     * Update chain overrides configuration
     * @description Update chain overrides configuration
     */
    post: operations["updateChainsConfiguration"];
  };
  "/configuration/transactions": {
    /**
     * Get transaction processing configuration
     * @description Get transactions processing configuration
     */
    get: operations["getTransactionConfiguration"];
    /**
     * Update transaction processing configuration
     * @description Update transaction processing configuration
     */
    post: operations["updateTransactionConfiguration"];
  };
  "/configuration/auth": {
    /**
     * Get auth configuration
     * @description Get auth configuration
     */
    get: operations["getAuthConfiguration"];
    /**
     * Update auth configuration
     * @description Update auth configuration
     */
    post: operations["updateAuthConfiguration"];
  };
  "/configuration/backend-wallet-balance": {
    /**
     * Get wallet-balance configuration
     * @description Get wallet-balance configuration
     */
    get: operations["getBackendWalletBalanceConfiguration"];
    /**
     * Update backend wallet balance configuration
     * @description Update backend wallet balance configuration
     */
    post: operations["updateBackendWalletBalanceConfiguration"];
  };
  "/configuration/cors": {
    /**
     * Get CORS configuration
     * @description Get CORS configuration
     */
    get: operations["getCorsConfiguration"];
    /**
     * Set CORS URLs
     * @description Replaces the CORS URLs to allow client-side calls to Engine
     */
    put: operations["setUrlsToCorsConfiguration"];
    /**
     * Add a CORS URL
     * @description Add a URL to allow client-side calls to Engine
     */
    post: operations["addUrlToCorsConfiguration"];
    /**
     * Remove CORS URLs
     * @description Remove URLs from CORS configuration
     */
    delete: operations["removeUrlToCorsConfiguration"];
  };
  "/configuration/cache": {
    /**
     * Get cache configuration
     * @description Get cache configuration
     */
    get: operations["getCacheConfiguration"];
    /**
     * Update cache configuration
     * @description Update cache configuration
     */
    post: operations["updateCacheConfiguration"];
  };
  "/configuration/contract-subscriptions": {
    /**
     * Get Contract Subscriptions configuration
     * @description Get the configuration for Contract Subscriptions
     */
    get: operations["getContractSubscriptionsConfiguration"];
    /**
     * Update Contract Subscriptions configuration
     * @description Update the configuration for Contract Subscriptions
     */
    post: operations["updateContractSubscriptionsConfiguration"];
  };
  "/webhooks/get-all": {
    /**
     * Get all webhooks configured
     * @description Get all webhooks configuration data set up on Engine
     */
    get: operations["getAll"];
  };
  "/webhooks/create": {
    /**
     * Create a webhook
     * @description Create a webhook to call when certain blockchain events occur.
     */
    post: operations["create"];
  };
  "/webhooks/revoke": {
    /**
     * Revoke webhook
     * @description Revoke a Webhook
     */
    post: operations["revoke"];
  };
  "/webhooks/event-types": {
    /**
     * Get webhooks event types
     * @description Get the all the webhooks event types
     */
    get: operations["getEventTypes"];
  };
  "/auth/permissions/get-all": {
    /**
     * Get all permissions
     * @description Get all users with their corresponding permissions
     */
    get: operations["getAll"];
  };
  "/auth/permissions/grant": {
    /**
     * Grant permissions to user
     * @description Grant permissions to a user
     */
    post: operations["grant"];
  };
  "/auth/permissions/revoke": {
    /**
     * Revoke permissions from user
     * @description Revoke a user's permissions
     */
    post: operations["revoke"];
  };
  "/auth/access-tokens/get-all": {
    /**
     * Get all access tokens
     * @description Get all access tokens
     */
    get: operations["getAll"];
  };
  "/auth/access-tokens/create": {
    /**
     * Create a new access token
     * @description Create a new access token
     */
    post: operations["create"];
  };
  "/auth/access-tokens/revoke": {
    /**
     * Revoke an access token
     * @description Revoke an access token
     */
    post: operations["revoke"];
  };
  "/auth/access-tokens/update": {
    /**
     * Update an access token
     * @description Update an access token
     */
    post: operations["update"];
  };
  "/auth/keypair/get-all": {
    /**
     * List public keys
     * @description List the public keys configured with Engine
     */
    get: operations["list"];
  };
  "/auth/keypair/add": {
    /**
     * Add public key
     * @description Add the public key for a keypair
     */
    post: operations["add"];
  };
  "/auth/keypair/remove": {
    /**
     * Remove public key
     * @description Remove the public key for a keypair
     */
    post: operations["remove"];
  };
  "/chain/get": {
    /**
     * Get chain details
     * @description Get details about a chain.
     */
    get: operations["get"];
  };
  "/chain/get-all": {
    /**
     * Get all chain details
     * @description Get details about all supported chains.
     */
    get: operations["getAll"];
  };
  "/relayer/get-all": {
    /**
     * Get all meta-transaction relayers
     * @description Get all meta-transaction relayers
     */
    get: operations["getAll"];
  };
  "/relayer/create": {
    /**
     * Create a new meta-transaction relayer
     * @description Create a new meta-transaction relayer
     */
    post: operations["create"];
  };
  "/relayer/revoke": {
    /**
     * Revoke a relayer
     * @description Revoke a relayer
     */
    post: operations["revoke"];
  };
  "/relayer/update": {
    /**
     * Update a relayer
     * @description Update a relayer
     */
    post: operations["update"];
  };
  "/relayer/{relayerId}": {
    /**
     * Relay a meta-transaction
     * @description Relay an EIP-2771 meta-transaction
     */
    post: operations["relay"];
  };
  "/contract/{chain}/{contractAddress}/read": {
    /**
     * Read from contract
     * @description Call a read function on a contract.
     */
    get: operations["read"];
  };
  "/contract/{chain}/{contractAddress}/write": {
    /**
     * Write to contract
     * @description Call a write function on a contract.
     */
    post: operations["write"];
  };
  "/contract/{chain}/{contractAddress}/events/get-all": {
    /**
     * Get all events
     * @description Get a list of all blockchain events for this contract.
     */
    get: operations["getAllEvents"];
  };
  "/contract/{chain}/{contractAddress}/events/get": {
    /**
     * Get events
     * @description Get a list of specific blockchain events emitted from this contract.
     */
    post: operations["getEvents"];
  };
  "/contract/{chain}/{contractAddress}/metadata/abi": {
    /**
     * Get ABI
     * @description Get the ABI of a contract.
     */
    get: operations["getAbi"];
  };
  "/contract/{chain}/{contractAddress}/metadata/events": {
    /**
     * Get events
     * @description Get details of all events implemented by a contract.
     */
    get: operations["getEvents"];
  };
  "/contract/{chain}/{contractAddress}/metadata/extensions": {
    /**
     * Get extensions
     * @description Get all detected extensions for a contract.
     */
    get: operations["getExtensions"];
  };
  "/contract/{chain}/{contractAddress}/metadata/functions": {
    /**
     * Get functions
     * @description Get details of all functions implemented by the contract.
     */
    get: operations["getFunctions"];
  };
  "/contract/{chain}/{contractAddress}/roles/get": {
    /**
     * Get wallets for role
     * @description Get all wallets with a specific role for a contract.
     */
    get: operations["getRole"];
  };
  "/contract/{chain}/{contractAddress}/roles/get-all": {
    /**
     * Get wallets for all roles
     * @description Get all wallets in each role for a contract.
     */
    get: operations["getAll"];
  };
  "/contract/{chain}/{contractAddress}/roles/grant": {
    /**
     * Grant role
     * @description Grant a role to a specific wallet.
     */
    post: operations["grant"];
  };
  "/contract/{chain}/{contractAddress}/roles/revoke": {
    /**
     * Revoke role
     * @description Revoke a role from a specific wallet.
     */
    post: operations["revoke"];
  };
  "/contract/{chain}/{contractAddress}/royalties/get-default-royalty-info": {
    /**
     * Get royalty details
     * @description Gets the royalty recipient and BPS (basis points) of the smart contract.
     */
    get: operations["getDefaultRoyaltyInfo"];
  };
  "/contract/{chain}/{contractAddress}/royalties/get-token-royalty-info/{token_id}": {
    /**
     * Get token royalty details
     * @description Gets the royalty recipient and BPS (basis points) of a particular token in the contract.
     */
    get: operations["getTokenRoyaltyInfo"];
  };
  "/contract/{chain}/{contractAddress}/royalties/set-default-royalty-info": {
    /**
     * Set royalty details
     * @description Set the royalty recipient and fee for the smart contract.
     */
    post: operations["setDefaultRoyaltyInfo"];
  };
  "/contract/{chain}/{contractAddress}/royalties/set-token-royalty-info": {
    /**
     * Set token royalty details
     * @description Set the royalty recipient and fee for a particular token in the contract.
     */
    post: operations["setTokenRoyaltyInfo"];
  };
  "/deploy/{chain}/prebuilts/edition": {
    /**
     * Deploy Edition
     * @description Deploy an Edition contract.
     */
    post: operations["deployEdition"];
  };
  "/deploy/{chain}/prebuilts/edition-drop": {
    /**
     * Deploy Edition Drop
     * @description Deploy an Edition Drop contract.
     */
    post: operations["deployEditionDrop"];
  };
  "/deploy/{chain}/prebuilts/marketplace-v3": {
    /**
     * Deploy Marketplace
     * @description Deploy a Marketplace contract.
     */
    post: operations["deployMarketplaceV3"];
  };
  "/deploy/{chain}/prebuilts/multiwrap": {
    /**
     * Deploy Multiwrap
     * @description Deploy a Multiwrap contract.
     */
    post: operations["deployMultiwrap"];
  };
  "/deploy/{chain}/prebuilts/nft-collection": {
    /**
     * Deploy NFT Collection
     * @description Deploy an NFT Collection contract.
     */
    post: operations["deployNFTCollection"];
  };
  "/deploy/{chain}/prebuilts/nft-drop": {
    /**
     * Deploy NFT Drop
     * @description Deploy an NFT Drop contract.
     */
    post: operations["deployNFTDrop"];
  };
  "/deploy/{chain}/prebuilts/pack": {
    /**
     * Deploy Pack
     * @description Deploy a Pack contract.
     */
    post: operations["deployPack"];
  };
  "/deploy/{chain}/prebuilts/signature-drop": {
    /**
     * Deploy Signature Drop
     * @description Deploy a Signature Drop contract.
     */
    post: operations["deploySignatureDrop"];
  };
  "/deploy/{chain}/prebuilts/split": {
    /**
     * Deploy Split
     * @description Deploy a Split contract.
     */
    post: operations["deploySplit"];
  };
  "/deploy/{chain}/prebuilts/token": {
    /**
     * Deploy Token
     * @description Deploy a Token contract.
     */
    post: operations["deployToken"];
  };
  "/deploy/{chain}/prebuilts/token-drop": {
    /**
     * Deploy Token Drop
     * @description Deploy a Token Drop contract.
     */
    post: operations["deployTokenDrop"];
  };
  "/deploy/{chain}/prebuilts/vote": {
    /**
     * Deploy Vote
     * @description Deploy a Vote contract.
     */
    post: operations["deployVote"];
  };
  "/deploy/{chain}/{publisher}/{contractName}": {
    /**
     * Deploy published contract
     * @description Deploy a published contract to the blockchain.
     */
    post: operations["deployPublished"];
  };
  "/deploy/contract-types": {
    /**
     * Get contract types
     * @description Get all prebuilt contract types.
     */
    get: operations["contractTypes"];
  };
  "/transaction/status/{queueId}": {
    /**
     * Get transaction status
     * @description Get the status for a transaction request.
     */
    get: operations["status"];
  };
  "/transaction/get-all": {
    /**
     * Get all transactions
     * @description Get all transaction requests.
     */
    get: operations["getAll"];
  };
  "/transaction/get-all-deployed-contracts": {
    /**
     * Get all deployment transactions
     * @description Get all transaction requests to deploy contracts.
     */
    get: operations["getAllDeployedContracts"];
  };
  "/transaction/status/group/{groupId}": {
    /**
     * Get transaction status for a group
     * @description Get the status for a transaction group.
     */
    get: operations["status"];
  };
  "/transaction/retry": {
    /**
     * Retry transaction
     * @description Retry a transaction with updated gas settings.
     */
    post: operations["retry"];
  };
  "/transaction/sync-retry": {
    /**
     * Retry transaction (synchronous)
     * @description Synchronously retry a transaction with updated gas settings.
     */
    post: operations["syncRetry"];
  };
  "/transaction/cancel": {
    /**
     * Cancel transaction
     * @description Attempt to cancel a transaction by sending a null transaction with a higher gas setting. This transaction is not guaranteed to be cancelled.
     */
    post: operations["cancel"];
  };
  "/transaction/{chain}/send-signed-transaction": {
    /**
     * Send a signed transaction
     * @description Send a signed transaction
     */
    post: operations["sendRawTransaction"];
  };
  "/transaction/{chain}/send-signed-user-op": {
    /**
     * Send a signed user operation
     * @description Send a signed user operation
     */
    post: operations["sendSignedUserOp"];
  };
  "/transaction/{chain}/tx-hash/{txHash}": {
    /**
     * Get transaction receipt from transaction hash
     * @description Get the transaction receipt from a transaction hash.
     */
    get: operations["txHashReceipt"];
  };
  "/transaction/{chain}/userop-hash/{userOpHash}": {
    /**
     * Get transaction receipt from user-op hash
     * @description Get the transaction receipt from a user-op hash.
     */
    get: operations["useropHashReceipt"];
  };
  "/contract/{chain}/{contractAddress}/account-factory/get-all-accounts": {
    /**
     * Get all smart accounts
     * @description Get all the smart accounts for this account factory.
     */
    get: operations["getAllAccounts"];
  };
  "/contract/{chain}/{contractAddress}/account-factory/get-associated-accounts": {
    /**
     * Get associated smart accounts
     * @description Get all the smart accounts for this account factory associated with the specific admin wallet.
     */
    get: operations["getAssociatedAccounts"];
  };
  "/contract/{chain}/{contractAddress}/account-factory/is-account-deployed": {
    /**
     * Check if deployed
     * @description Check if a smart account has been deployed to the blockchain.
     */
    get: operations["isAccountDeployed"];
  };
  "/contract/{chain}/{contractAddress}/account-factory/predict-account-address": {
    /**
     * Predict smart account address
     * @description Get the counterfactual address of a smart account.
     */
    get: operations["predictAccountAddress"];
  };
  "/contract/{chain}/{contractAddress}/account-factory/create-account": {
    /**
     * Create smart account
     * @description Create a smart account for this account factory.
     */
    post: operations["createAccount"];
  };
  "/contract/{chain}/{contractAddress}/account/admins/get-all": {
    /**
     * Get all admins
     * @description Get all admins for a smart account.
     */
    get: operations["getAllAdmins"];
  };
  "/contract/{chain}/{contractAddress}/account/sessions/get-all": {
    /**
     * Get all session keys
     * @description Get all session keys for a smart account.
     */
    get: operations["getAllSessions"];
  };
  "/contract/{chain}/{contractAddress}/account/admins/grant": {
    /**
     * Grant admin
     * @description Grant a smart account's admin permission.
     */
    post: operations["grantAdmin"];
  };
  "/contract/{chain}/{contractAddress}/account/admins/revoke": {
    /**
     * Revoke admin
     * @description Revoke a smart account's admin permission.
     */
    post: operations["revokeAdmin"];
  };
  "/contract/{chain}/{contractAddress}/account/sessions/create": {
    /**
     * Create session key
     * @description Create a session key for a smart account.
     */
    post: operations["grantSession"];
  };
  "/contract/{chain}/{contractAddress}/account/sessions/revoke": {
    /**
     * Revoke session key
     * @description Revoke a session key for a smart account.
     */
    post: operations["revokeSession"];
  };
  "/contract/{chain}/{contractAddress}/account/sessions/update": {
    /**
     * Update session key
     * @description Update a session key for a smart account.
     */
    post: operations["updateSession"];
  };
  "/contract/{chain}/{contractAddress}/erc20/allowance-of": {
    /**
     * Get token allowance
     * @description Get the allowance of a specific wallet for an ERC-20 contract.
     */
    get: operations["allowanceOf"];
  };
  "/contract/{chain}/{contractAddress}/erc20/balance-of": {
    /**
     * Get token balance
     * @description Get the balance of a specific wallet address for this ERC-20 contract.
     */
    get: operations["balanceOf"];
  };
  "/contract/{chain}/{contractAddress}/erc20/get": {
    /**
     * Get token details
     * @description Get details for this ERC-20 contract.
     */
    get: operations["get"];
  };
  "/contract/{chain}/{contractAddress}/erc20/total-supply": {
    /**
     * Get total supply
     * @description Get the total supply in circulation for this ERC-20 contract.
     */
    get: operations["totalSupply"];
  };
  "/contract/{chain}/{contractAddress}/erc20/signature/generate": {
    /**
     * Generate signature
     * @description Generate a signature granting access for another wallet to mint tokens from this ERC-20 contract. This method is typically called by the token contract owner.
     */
    post: operations["signatureGenerate"];
  };
  "/contract/{chain}/{contractAddress}/erc20/claim-conditions/can-claim": {
    /**
     * Check if tokens are available for claiming
     * @description Check if tokens are currently available for claiming, optionally specifying if a specific wallet address can claim.
     */
    get: operations["canClaim"];
  };
  "/contract/{chain}/{contractAddress}/erc20/claim-conditions/get-active": {
    /**
     * Retrieve the currently active claim phase, if any.
     * @description Retrieve the currently active claim phase, if any.
     */
    get: operations["getActiveClaimConditions"];
  };
  "/contract/{chain}/{contractAddress}/erc20/claim-conditions/get-all": {
    /**
     * Get all the claim phases configured.
     * @description Get all the claim phases configured on the drop contract.
     */
    get: operations["getAllClaimConditions"];
  };
  "/contract/{chain}/{contractAddress}/erc20/claim-conditions/get-claim-ineligibility-reasons": {
    /**
     * Get claim ineligibility reasons
     * @description Get an array of reasons why a specific wallet address is not eligible to claim tokens, if any.
     */
    get: operations["claimConditionsGetClaimIneligibilityReasons"];
  };
  "/contract/{chain}/{contractAddress}/erc20/claim-conditions/get-claimer-proofs": {
    /**
     * Get claimer proofs
     * @description Returns allowlist information and merkle proofs for a given wallet address. Returns null if no proof is found for the given wallet address.
     */
    post: operations["claimConditionsGetClaimerProofs"];
  };
  "/contract/{chain}/{contractAddress}/erc20/set-allowance": {
    /**
     * Set allowance
     * @description Grant a specific wallet address to transfer ERC-20 tokens from the caller wallet.
     */
    post: operations["setAllowance"];
  };
  "/contract/{chain}/{contractAddress}/erc20/transfer": {
    /**
     * Transfer tokens
     * @description Transfer ERC-20 tokens from the caller wallet to a specific wallet.
     */
    post: operations["transfer"];
  };
  "/contract/{chain}/{contractAddress}/erc20/transfer-from": {
    /**
     * Transfer tokens from wallet
     * @description Transfer ERC-20 tokens from the connected wallet to another wallet. Requires allowance.
     */
    post: operations["transferFrom"];
  };
  "/contract/{chain}/{contractAddress}/erc20/burn": {
    /**
     * Burn token
     * @description Burn ERC-20 tokens in the caller wallet.
     */
    post: operations["burn"];
  };
  "/contract/{chain}/{contractAddress}/erc20/burn-from": {
    /**
     * Burn token from wallet
     * @description Burn ERC-20 tokens in a specific wallet. Requires allowance.
     */
    post: operations["burnFrom"];
  };
  "/contract/{chain}/{contractAddress}/erc20/claim-to": {
    /**
     * Claim tokens to wallet
     * @description Claim ERC-20 tokens to a specific wallet.
     */
    post: operations["claimTo"];
  };
  "/contract/{chain}/{contractAddress}/erc20/mint-batch-to": {
    /**
     * Mint tokens (batch)
     * @description Mint ERC-20 tokens to multiple wallets in one transaction.
     */
    post: operations["mintBatchTo"];
  };
  "/contract/{chain}/{contractAddress}/erc20/mint-to": {
    /**
     * Mint tokens
     * @description Mint ERC-20 tokens to a specific wallet.
     */
    post: operations["mintTo"];
  };
  "/contract/{chain}/{contractAddress}/erc20/signature/mint": {
    /**
     * Signature mint
     * @description Mint ERC-20 tokens from a generated signature.
     */
    post: operations["signatureMint"];
  };
  "/contract/{chain}/{contractAddress}/erc20/claim-conditions/set": {
    /**
     * Overwrite the claim conditions for the drop.
     * @description Overwrite the claim conditions for the drop. All properties of a phase are optional, with the default being a free, open, unlimited claim, in the native currency, starting immediately.
     */
    post: operations["setClaimConditions"];
  };
  "/contract/{chain}/{contractAddress}/erc20/claim-conditions/update": {
    /**
     * Update a single claim phase.
     * @description Update a single claim phase, by providing the index of the claim phase and the new phase configuration. The index is the position of the phase in the list of phases you have made, starting from zero. e.g. if you have two phases, the first phase has an index of 0 and the second phase has an index of 1. All properties of a phase are optional, with the default being a free, open, unlimited claim, in the native currency, starting immediately.
     */
    post: operations["updateClaimConditions"];
  };
  "/contract/{chain}/{contractAddress}/erc721/get": {
    /**
     * Get details
     * @description Get the details for a token in an ERC-721 contract.
     */
    get: operations["get"];
  };
  "/contract/{chain}/{contractAddress}/erc721/get-all": {
    /**
     * Get all details
     * @description Get details for all tokens in an ERC-721 contract.
     */
    get: operations["getAll"];
  };
  "/contract/{chain}/{contractAddress}/erc721/get-owned": {
    /**
     * Get owned tokens
     * @description Get all tokens in an ERC-721 contract owned by a specific wallet.
     */
    get: operations["getOwned"];
  };
  "/contract/{chain}/{contractAddress}/erc721/balance-of": {
    /**
     * Get token balance
     * @description Get the balance of a specific wallet address for this ERC-721 contract.
     */
    get: operations["balanceOf"];
  };
  "/contract/{chain}/{contractAddress}/erc721/is-approved": {
    /**
     * Check if approved transfers
     * @description Check if the specific wallet has approved transfers from a specific operator wallet.
     */
    get: operations["isApproved"];
  };
  "/contract/{chain}/{contractAddress}/erc721/total-count": {
    /**
     * Get total supply
     * @description Get the total supply in circulation for this ERC-721 contract.
     */
    get: operations["totalCount"];
  };
  "/contract/{chain}/{contractAddress}/erc721/total-claimed-supply": {
    /**
     * Get claimed supply
     * @description Get the claimed supply for this ERC-721 contract.
     */
    get: operations["totalClaimedSupply"];
  };
  "/contract/{chain}/{contractAddress}/erc721/total-unclaimed-supply": {
    /**
     * Get unclaimed supply
     * @description Get the unclaimed supply for this ERC-721 contract.
     */
    get: operations["totalUnclaimedSupply"];
  };
  "/contract/{chain}/{contractAddress}/erc721/claim-conditions/can-claim": {
    /**
     * Check if tokens are available for claiming
     * @description Check if tokens are currently available for claiming, optionally specifying if a specific wallet address can claim.
     */
    get: operations["canClaim"];
  };
  "/contract/{chain}/{contractAddress}/erc721/claim-conditions/get-active": {
    /**
     * Retrieve the currently active claim phase, if any.
     * @description Retrieve the currently active claim phase, if any.
     */
    get: operations["getActiveClaimConditions"];
  };
  "/contract/{chain}/{contractAddress}/erc721/claim-conditions/get-all": {
    /**
     * Get all the claim phases configured for the drop.
     * @description Get all the claim phases configured for the drop.
     */
    get: operations["getAllClaimConditions"];
  };
  "/contract/{chain}/{contractAddress}/erc721/claim-conditions/get-claim-ineligibility-reasons": {
    /**
     * Get claim ineligibility reasons
     * @description Get an array of reasons why a specific wallet address is not eligible to claim tokens, if any.
     */
    get: operations["getClaimIneligibilityReasons"];
  };
  "/contract/{chain}/{contractAddress}/erc721/claim-conditions/get-claimer-proofs": {
    /**
     * Get claimer proofs
     * @description Returns allowlist information and merkle proofs for a given wallet address. Returns null if no proof is found for the given wallet address.
     */
    get: operations["getClaimerProofs"];
  };
  "/contract/{chain}/{contractAddress}/erc721/set-approval-for-all": {
    /**
     * Set approval for all
     * @description Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.
     */
    post: operations["setApprovalForAll"];
  };
  "/contract/{chain}/{contractAddress}/erc721/set-approval-for-token": {
    /**
     * Set approval for token
     * @description Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specific token.
     */
    post: operations["setApprovalForToken"];
  };
  "/contract/{chain}/{contractAddress}/erc721/transfer": {
    /**
     * Transfer token
     * @description Transfer an ERC-721 token from the caller wallet.
     */
    post: operations["transfer"];
  };
  "/contract/{chain}/{contractAddress}/erc721/transfer-from": {
    /**
     * Transfer token from wallet
     * @description Transfer an ERC-721 token from the connected wallet to another wallet. Requires allowance.
     */
    post: operations["transferFrom"];
  };
  "/contract/{chain}/{contractAddress}/erc721/mint-to": {
    /**
     * Mint tokens
     * @description Mint ERC-721 tokens to a specific wallet.
     */
    post: operations["mintTo"];
  };
  "/contract/{chain}/{contractAddress}/erc721/mint-batch-to": {
    /**
     * Mint tokens (batch)
     * @description Mint ERC-721 tokens to multiple wallets in one transaction.
     */
    post: operations["mintBatchTo"];
  };
  "/contract/{chain}/{contractAddress}/erc721/burn": {
    /**
     * Burn token
     * @description Burn ERC-721 tokens in the caller wallet.
     */
    post: operations["burn"];
  };
  "/contract/{chain}/{contractAddress}/erc721/lazy-mint": {
    /**
     * Lazy mint
     * @description Lazy mint ERC-721 tokens to be claimed in the future.
     */
    post: operations["lazyMint"];
  };
  "/contract/{chain}/{contractAddress}/erc721/claim-to": {
    /**
     * Claim tokens to wallet
     * @description Claim ERC-721 tokens to a specific wallet.
     */
    post: operations["claimTo"];
  };
  "/contract/{chain}/{contractAddress}/erc721/signature/generate": {
    /**
     * Generate signature
     * @description Generate a signature granting access for another wallet to mint tokens from this ERC-721 contract. This method is typically called by the token contract owner.
     */
    post: operations["signatureGenerate"];
  };
  "/contract/{chain}/{contractAddress}/erc721/signature/mint": {
    /**
     * Signature mint
     * @description Mint ERC-721 tokens from a generated signature.
     */
    post: operations["signatureMint"];
  };
  "/contract/{chain}/{contractAddress}/erc721/claim-conditions/set": {
    /**
     * Overwrite the claim conditions for the drop.
     * @description Overwrite the claim conditions for the drop. All properties of a phase are optional, with the default being a free, open, unlimited claim, in the native currency, starting immediately.
     */
    post: operations["setClaimConditions"];
  };
  "/contract/{chain}/{contractAddress}/erc721/claim-conditions/update": {
    /**
     * Update a single claim phase.
     * @description Update a single claim phase, by providing the index of the claim phase and the new phase configuration. The index is the position of the phase in the list of phases you have made, starting from zero. e.g. if you have two phases, the first phase has an index of 0 and the second phase has an index of 1. All properties of a phase are optional, with the default being a free, open, unlimited claim, in the native currency, starting immediately.
     */
    post: operations["updateClaimConditions"];
  };
  "/contract/{chain}/{contractAddress}/erc721/signature/prepare": {
    /**
     * Prepare signature
     * @description Prepares a payload for a wallet to generate a signature.
     */
    post: operations["signaturePrepare"];
  };
  "/contract/{chain}/{contractAddress}/erc721/token/update": {
    /**
     * Update token metadata
     * @description Update the metadata for an ERC721 token.
     */
    post: operations["updateTokenMetadata"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/get": {
    /**
     * Get details
     * @description Get the details for a token in an ERC-1155 contract.
     */
    get: operations["get"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/get-all": {
    /**
     * Get all details
     * @description Get details for all tokens in an ERC-1155 contract.
     */
    get: operations["getAll"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/get-owned": {
    /**
     * Get owned tokens
     * @description Get all tokens in an ERC-1155 contract owned by a specific wallet.
     */
    get: operations["getOwned"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/balance-of": {
    /**
     * Get balance
     * @description Get the balance of a specific wallet address for this ERC-1155 contract.
     */
    get: operations["balanceOf"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/is-approved": {
    /**
     * Check if approved transfers
     * @description Check if the specific wallet has approved transfers from a specific operator wallet.
     */
    get: operations["isApproved"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/total-count": {
    /**
     * Get total supply
     * @description Get the total supply in circulation for this ERC-1155 contract.
     */
    get: operations["totalCount"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/total-supply": {
    /**
     * Get total supply
     * @description Get the total supply in circulation for this ERC-1155 contract.
     */
    get: operations["totalSupply"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/signature/generate": {
    /**
     * Generate signature
     * @description Generate a signature granting access for another wallet to mint tokens from this ERC-721 contract. This method is typically called by the token contract owner.
     */
    post: operations["signatureGenerate"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/claim-conditions/can-claim": {
    /**
     * Check if tokens are available for claiming
     * @description Check if tokens are currently available for claiming, optionally specifying if a specific wallet address can claim.
     */
    get: operations["canClaim"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/claim-conditions/get-active": {
    /**
     * Get currently active claim phase for a specific token ID.
     * @description Retrieve the currently active claim phase for a specific token ID, if any.
     */
    get: operations["getActiveClaimConditions"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/claim-conditions/get-all": {
    /**
     * Get all the claim phases configured for a specific token ID.
     * @description Get all the claim phases configured for a specific token ID.
     */
    get: operations["getAllClaimConditions"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/claim-conditions/get-claimer-proofs": {
    /**
     * Get claimer proofs
     * @description Returns allowlist information and merkle proofs for a given wallet address. Returns null if no proof is found for the given wallet address.
     */
    get: operations["getClaimerProofs"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/claim-conditions/get-claim-ineligibility-reasons": {
    /**
     * Get claim ineligibility reasons
     * @description Get an array of reasons why a specific wallet address is not eligible to claim tokens, if any.
     */
    post: operations["getClaimIneligibilityReasons"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/airdrop": {
    /**
     * Airdrop tokens
     * @description Airdrop ERC-1155 tokens to specific wallets.
     */
    post: operations["airdrop"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/burn": {
    /**
     * Burn token
     * @description Burn ERC-1155 tokens in the caller wallet.
     */
    post: operations["burn"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/burn-batch": {
    /**
     * Burn tokens (batch)
     * @description Burn a batch of ERC-1155 tokens in the caller wallet.
     */
    post: operations["burnBatch"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/claim-to": {
    /**
     * Claim tokens to wallet
     * @description Claim ERC-1155 tokens to a specific wallet.
     */
    post: operations["claimTo"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/lazy-mint": {
    /**
     * Lazy mint
     * @description Lazy mint ERC-1155 tokens to be claimed in the future.
     */
    post: operations["lazyMint"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/mint-additional-supply-to": {
    /**
     * Mint additional supply
     * @description Mint additional supply of ERC-1155 tokens to a specific wallet.
     */
    post: operations["mintAdditionalSupplyTo"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/mint-batch-to": {
    /**
     * Mint tokens (batch)
     * @description Mint ERC-1155 tokens to multiple wallets in one transaction.
     */
    post: operations["mintBatchTo"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/mint-to": {
    /**
     * Mint tokens
     * @description Mint ERC-1155 tokens to a specific wallet.
     */
    post: operations["mintTo"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/set-approval-for-all": {
    /**
     * Set approval for all
     * @description Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.
     */
    post: operations["setApprovalForAll"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/transfer": {
    /**
     * Transfer token
     * @description Transfer an ERC-1155 token from the caller wallet.
     */
    post: operations["transfer"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/transfer-from": {
    /**
     * Transfer token from wallet
     * @description Transfer an ERC-1155 token from the connected wallet to another wallet. Requires allowance.
     */
    post: operations["transferFrom"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/signature/mint": {
    /**
     * Signature mint
     * @description Mint ERC-1155 tokens from a generated signature.
     */
    post: operations["signatureMint"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/claim-conditions/set": {
    /**
     * Overwrite the claim conditions for a specific token ID..
     * @description Overwrite the claim conditions for a specific token ID. All properties of a phase are optional, with the default being a free, open, unlimited claim, in the native currency, starting immediately.
     */
    post: operations["setClaimConditions"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/claim-conditions/set-batch": {
    /**
     * Overwrite the claim conditions for a specific token ID..
     * @description Allows you to set claim conditions for multiple token IDs in a single transaction.
     */
    post: operations["claimConditionsUpdate"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/claim-conditions/update": {
    /**
     * Update a single claim phase.
     * @description Update a single claim phase on a specific token ID, by providing the index of the claim phase and the new phase configuration.
     */
    post: operations["updateClaimConditions"];
  };
  "/contract/{chain}/{contractAddress}/erc1155/token/update": {
    /**
     * Update token metadata
     * @description Update the metadata for an ERC1155 token.
     */
    post: operations["updateTokenMetadata"];
  };
  "/marketplace/{chain}/{contractAddress}/direct-listings/get-all": {
    /**
     * Get all listings
     * @description Get all direct listings for this marketplace contract.
     */
    get: operations["getAll"];
  };
  "/marketplace/{chain}/{contractAddress}/direct-listings/get-all-valid": {
    /**
     * Get all valid listings
     * @description Get all the valid direct listings for this marketplace contract. A valid listing is where the listing is active, and the creator still owns & has approved Marketplace to transfer the listed NFTs.
     */
    get: operations["getAllValid"];
  };
  "/marketplace/{chain}/{contractAddress}/direct-listings/get-listing": {
    /**
     * Get direct listing
     * @description Gets a direct listing on this marketplace contract.
     */
    get: operations["getListing"];
  };
  "/marketplace/{chain}/{contractAddress}/direct-listings/is-buyer-approved-for-listing": {
    /**
     * Check approved buyer
     * @description Check if a buyer is approved to purchase a specific direct listing.
     */
    get: operations["isBuyerApprovedForListing"];
  };
  "/marketplace/{chain}/{contractAddress}/direct-listings/is-currency-approved-for-listing": {
    /**
     * Check approved currency
     * @description Check if a currency is approved for a specific direct listing.
     */
    get: operations["isCurrencyApprovedForListing"];
  };
  "/marketplace/{chain}/{contractAddress}/direct-listings/get-total-count": {
    /**
     * Transfer token from wallet
     * @description Get the total number of direct listings on this marketplace contract.
     */
    get: operations["getTotalCount"];
  };
  "/marketplace/{chain}/{contractAddress}/english-auctions/get-all": {
    /**
     * Get all English auctions
     * @description Get all English auction listings on this marketplace contract.
     */
    get: operations["getAll"];
  };
  "/marketplace/{chain}/{contractAddress}/english-auctions/get-all-valid": {
    /**
     * Get all valid English auctions
     * @description Get all valid English auction listings on this marketplace contract.
     */
    get: operations["getAllValid"];
  };
  "/marketplace/{chain}/{contractAddress}/english-auctions/get-auction": {
    /**
     * Get English auction
     * @description Get a specific English auction listing on this marketplace contract.
     */
    get: operations["getAuction"];
  };
  "/marketplace/{chain}/{contractAddress}/english-auctions/get-bid-buffer-bps": {
    /**
     * Get bid buffer BPS
     * @description Get the basis points of the bid buffer.
     * This is the percentage higher that a new bid must be than the current highest bid in order to be placed.
     * If there is no current bid, the bid must be at least the minimum bid amount.
     * Returns the value in percentage format, e.g. 100 = 1%.
     */
    get: operations["getBidBufferBps"];
  };
  "/marketplace/{chain}/{contractAddress}/english-auctions/get-minimum-next-bid": {
    /**
     * Get minimum next bid
     * @description Helper function to calculate the value that the next bid must be in order to be accepted.
     * If there is no current bid, the bid must be at least the minimum bid amount.
     * If there is a current bid, the bid must be at least the current bid amount + the bid buffer.
     */
    get: operations["getMinimumNextBid"];
  };
  "/marketplace/{chain}/{contractAddress}/english-auctions/get-winning-bid": {
    /**
     * Get winning bid
     * @description Get the current highest bid of an active auction.
     */
    get: operations["getWinningBid"];
  };
  "/marketplace/{chain}/{contractAddress}/english-auctions/get-total-count": {
    /**
     * Get total listings
     * @description Get the count of English auction listings on this marketplace contract.
     */
    get: operations["getTotalCount"];
  };
  "/marketplace/{chain}/{contractAddress}/english-auctions/is-winning-bid": {
    /**
     * Check winning bid
     * @description Check if a bid is or will be the winning bid for an auction.
     */
    get: operations["isWinningBid"];
  };
  "/marketplace/{chain}/{contractAddress}/english-auctions/get-winner": {
    /**
     * Get winner
     * @description Get the winner of an English auction. Can only be called after the auction has ended.
     */
    get: operations["getWinner"];
  };
  "/marketplace/{chain}/{contractAddress}/offers/get-all": {
    /**
     * Get all offers
     * @description Get all offers on this marketplace contract.
     */
    get: operations["getAll"];
  };
  "/marketplace/{chain}/{contractAddress}/offers/get-all-valid": {
    /**
     * Get all valid offers
     * @description Get all valid offers on this marketplace contract. Valid offers are offers that have not expired, been canceled, or been accepted.
     */
    get: operations["getAllValid"];
  };
  "/marketplace/{chain}/{contractAddress}/offers/get-offer": {
    /**
     * Get offer
     * @description Get details about an offer.
     */
    get: operations["getOffer"];
  };
  "/marketplace/{chain}/{contractAddress}/offers/get-total-count": {
    /**
     * Get total count
     * @description Get the total number of offers on this marketplace contract.
     */
    get: operations["getTotalCount"];
  };
  "/marketplace/{chain}/{contractAddress}/direct-listings/create-listing": {
    /**
     * Create direct listing
     * @description Create a direct listing on this marketplace contract.
     */
    post: operations["createListing"];
  };
  "/marketplace/{chain}/{contractAddress}/direct-listings/update-listing": {
    /**
     * Update direct listing
     * @description Update a direct listing on this marketplace contract.
     */
    post: operations["updateListing"];
  };
  "/marketplace/{chain}/{contractAddress}/direct-listings/buy-from-listing": {
    /**
     * Buy from direct listing
     * @description Buy from a specific direct listing from this marketplace contract.
     */
    post: operations["buyFromListing"];
  };
  "/marketplace/{chain}/{contractAddress}/direct-listings/approve-buyer-for-reserved-listing": {
    /**
     * Approve buyer for reserved listing
     * @description Approve a wallet address to buy from a reserved listing.
     */
    post: operations["approveBuyerForReservedListing"];
  };
  "/marketplace/{chain}/{contractAddress}/direct-listings/revoke-buyer-approval-for-reserved-listing": {
    /**
     * Revoke approval for reserved listings
     * @description Revoke approval for a buyer to purchase a reserved listing.
     */
    post: operations["revokeBuyerApprovalForReservedListing"];
  };
  "/marketplace/{chain}/{contractAddress}/direct-listings/revoke-currency-approval-for-listing": {
    /**
     * Revoke currency approval for reserved listing
     * @description Revoke approval of a currency for a reserved listing.
     */
    post: operations["revokeCurrencyApprovalForListing"];
  };
  "/marketplace/{chain}/{contractAddress}/direct-listings/cancel-listing": {
    /**
     * Cancel direct listing
     * @description Cancel a direct listing from this marketplace contract. Only the creator of the listing can cancel it.
     */
    post: operations["cancelListing"];
  };
  "/marketplace/{chain}/{contractAddress}/english-auctions/buyout-auction": {
    /**
     * Buyout English auction
     * @description Buyout the listing for this auction.
     */
    post: operations["buyoutAuction"];
  };
  "/marketplace/{chain}/{contractAddress}/english-auctions/cancel-auction": {
    /**
     * Cancel English auction
     * @description Cancel an existing auction listing. Only the creator of the listing can cancel it. Auctions cannot be canceled once a bid has been made.
     */
    post: operations["cancelAuction"];
  };
  "/marketplace/{chain}/{contractAddress}/english-auctions/create-auction": {
    /**
     * Create English auction
     * @description Create an English auction listing on this marketplace contract.
     */
    post: operations["createAuction"];
  };
  "/marketplace/{chain}/{contractAddress}/english-auctions/close-auction-for-bidder": {
    /**
     * Close English auction for bidder
     * @description After an auction has concluded (and a buyout did not occur),
     * execute the sale for the buyer, meaning the buyer receives the NFT(s).
     * You must also call closeAuctionForSeller to execute the sale for the seller,
     * meaning the seller receives the payment from the highest bid.
     */
    post: operations["closeAuctionForBidder"];
  };
  "/marketplace/{chain}/{contractAddress}/english-auctions/close-auction-for-seller": {
    /**
     * Close English auction for seller
     * @description After an auction has concluded (and a buyout did not occur),
     * execute the sale for the seller, meaning the seller receives the payment from the highest bid.
     * You must also call closeAuctionForBidder to execute the sale for the buyer, meaning the buyer receives the NFT(s).
     */
    post: operations["closeAuctionForSeller"];
  };
  "/marketplace/{chain}/{contractAddress}/english-auctions/execute-sale": {
    /**
     * Execute sale
     * @description Close the auction for both buyer and seller.
     * This means the NFT(s) will be transferred to the buyer and the seller will receive the funds.
     * This function can only be called after the auction has ended.
     */
    post: operations["executeSale"];
  };
  "/marketplace/{chain}/{contractAddress}/english-auctions/make-bid": {
    /**
     * Make bid
     * @description Place a bid on an English auction listing.
     */
    post: operations["makeBid"];
  };
  "/marketplace/{chain}/{contractAddress}/offers/make-offer": {
    /**
     * Make offer
     * @description Make an offer on a token. A valid listing is not required.
     */
    post: operations["makeOffer"];
  };
  "/marketplace/{chain}/{contractAddress}/offers/cancel-offer": {
    /**
     * Cancel offer
     * @description Cancel a valid offer made by the caller wallet.
     */
    post: operations["cancelOffer"];
  };
  "/marketplace/{chain}/{contractAddress}/offers/accept-offer": {
    /**
     * Accept offer
     * @description Accept a valid offer.
     */
    post: operations["acceptOffer"];
  };
  "/contract-subscriptions/get-all": {
    /**
     * Get contract subscriptions
     * @description Get all contract subscriptions.
     */
    get: operations["getContractSubscriptions"];
  };
  "/contract-subscriptions/add": {
    /**
     * Add contract subscription
     * @description Subscribe to event logs and transaction receipts for a contract.
     */
    post: operations["addContractSubscription"];
  };
  "/contract-subscriptions/remove": {
    /**
     * Remove contract subscription
     * @description Remove an existing contract subscription
     */
    post: operations["removeContractSubscription"];
  };
  "/contract/{chain}/{contractAddress}/subscriptions/get-indexed-blocks": {
    /**
     * Get subscribed contract indexed block range
     * @description Gets the subscribed contract's indexed block range
     */
    get: operations["getContractIndexedBlockRange"];
  };
  "/contract-subscriptions/last-block": {
    /**
     * Get last processed block
     * @description Get the last processed block for a chain.
     */
    get: operations["getLatestBlock"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Create a new meta-transaction relayer
   * @description Create a new meta-transaction relayer
   */
  create: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "name": "My relayer",
         *   "chain": "mainnet",
         *   "backendWalletAddress": "0",
         *   "allowedContracts": [
         *     "0x1234...."
         *   ],
         *   "allowedForwarders": [
         *     "0x1234..."
         *   ]
         * }
         */
        "application/json": {
          name?: string;
          chain: string;
          /** @description The address of the backend wallet to use for relaying transactions. */
          backendWalletAddress: string;
          allowedContracts?: string[];
          allowedForwarders?: string[];
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              relayerId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Import backend wallet
   * @description Import an existing wallet as a backend wallet.
   */
  import: {
    requestBody?: {
      content: {
        "application/json": {
          /** @description AWS KMS key ID */
          awsKmsKeyId: string;
          /** @description AWS KMS key ARN */
          awsKmsArn: string;
        } | {
          /** @description GCP KMS key ID */
          gcpKmsKeyId: string;
          /** @description GCP KMS key version ID */
          gcpKmsKeyVersionId: string;
        } | ({
          /** @description The private key of the wallet to import */
          privateKey: string;
        } | {
          /** @description The mnemonic phrase of the wallet to import */
          mnemonic: string;
        } | {
          /** @description The encrypted JSON of the wallet to import */
          encryptedJson: string;
          /** @description The password used to encrypt the encrypted JSON */
          password: string;
        });
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              walletAddress: string;
              status: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Update a relayer
   * @description Update a relayer
   */
  update: {
    requestBody: {
      content: {
        "application/json": {
          id: string;
          name?: string;
          chain?: string;
          backendWalletAddress?: string;
          allowedContracts?: string[];
          allowedForwarders?: string[];
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              success: boolean;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get balance
   * @description Get the native balance for a backend wallet.
   */
  getBalance: {
    parameters: {
      path: {
        /**
         * @description Chain name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Backend wallet address
         * @example 0x...
         */
        walletAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              walletAddress: string;
              name: string;
              symbol: string;
              decimals: number;
              value: string;
              displayValue: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get all offers
   * @description Get all offers on this marketplace contract.
   */
  getAll: {
    parameters: {
      query?: {
        /** @description Number of listings to fetch */
        count?: number;
        /** @description has offers from this Address */
        offeror?: string;
        /** @description Satrt from this index (pagination) */
        start?: number;
        /** @description Token contract address to show NFTs from */
        tokenContract?: string;
        /** @description Only show NFTs with this ID */
        tokenId?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: ({
                /** @description The address of the asset being listed. */
                assetContractAddress: string;
                /** @description The ID of the token to list. */
                tokenId: string;
                /** @description The address of the currency to accept for the listing. */
                currencyContractAddress?: string;
                /** @description The quantity of tokens to include in the listing. NOTE: For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here). */
                quantity?: string;
                /** @description The id of the offer. */
                id: string;
                /** @description The address of the creator of offer. */
                offerorAddress: string;
                /** @description The `CurrencyValue` of the listing. Useful for displaying the price information. */
                currencyValue?: {
                  name: string;
                  symbol: string;
                  decimals: number;
                  value: string;
                  displayValue: string;
                };
                /** @description The total offer amount for the NFTs. */
                totalPrice: string;
                asset?: {
                  id: string;
                  uri: string;
                  name?: string | number | null;
                  description?: string | null;
                  image?: string | null;
                  external_url?: string | null;
                  animation_url?: string | null;
                  properties?: unknown;
                  attributes?: unknown;
                  [key: string]: unknown;
                };
                /** @description The end time of the auction. */
                endTimeInSeconds?: number;
                status?: 0 | 1 | 2 | 3 | 4 | 5;
              })[];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Transfer token
   * @description Transfer an ERC-1155 token from the caller wallet.
   */
  transfer: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description ERC1155 Contract Address on the Chain
         * @example 0x19411143085F1ec7D21a7cc07000CBA5188C5e8e
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "to": "0x3EcDBF3B911d0e9052b64850693888b008e18373",
         *   "tokenId": "0",
         *   "amount": "1"
         * }
         */
        "application/json": {
          /** @description Address of the wallet to transfer to */
          to: string;
          /** @description the tokenId to transfer */
          tokenId: string;
          /** @description the amount of tokens to transfer */
          amount: string;
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Withdraw all funds
   * @description Withdraw all funds from this wallet to another wallet
   */
  withdraw: {
    parameters: {
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain name
         * @example mumbai
         */
        chain: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Address to withdraw all funds to */
          toAddress: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Send a transaction
   * @description Send a transaction with transaction parameters
   */
  sendTransaction: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        chain: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "toAddress": "0x7a0ce8524bea337f0bee853b68fabde145dac0a0",
         *   "data": "0x449a52f800000000000000000000000043cae0d7fe86c713530e679ce02574743b2ee9fc0000000000000000000000000000000000000000000000000de0b6b3a7640000",
         *   "value": "0x00"
         * }
         */
        "application/json": {
          toAddress?: string;
          data: string;
          value: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Send a batch of raw transactions
   * @description Send a batch of raw transactions with transaction parameters
   */
  sendTransactionBatch: {
    parameters: {
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        chain: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
            toAddress?: string;
            data: string;
            value: string;
          }[];
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              groupId: string;
              queueIds: string[];
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Sign a transaction
   * @description Sign a transaction
   */
  signTransaction: {
    parameters: {
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          transaction: {
            to?: string;
            from?: string;
            nonce?: string;
            gasLimit?: string;
            gasPrice?: string;
            data?: string;
            value?: string;
            chainId?: number;
            type?: number;
            accessList?: unknown;
            maxFeePerGas?: string;
            maxPriorityFeePerGas?: string;
            customData?: {
              [key: string]: unknown;
            };
            ccipReadEnabled?: boolean;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Sign a message
   * @description Send a message
   */
  signMessage: {
    parameters: {
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          message: string;
          isBytes?: boolean;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Sign an EIP-712 message
   * @description Send an EIP-712 message ("typed data")
   */
  signTypedData: {
    parameters: {
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          domain: {
            [key: string]: unknown;
          };
          types: {
            [key: string]: unknown;
          };
          value: {
            [key: string]: unknown;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get all transactions
   * @description Get all transactions for a backend wallet.
   */
  getAllTransactions: {
    parameters: {
      path: {
        /**
         * @description Chain name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Backend wallet address
         * @example 0x...
         */
        walletAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              transactions: ({
                  queueId: string | null;
                  chainId: string | null;
                  fromAddress: string | null;
                  toAddress: string | null;
                  data: string | null;
                  extension: string | null;
                  value: string | null;
                  nonce: number | null;
                  gasLimit: string | null;
                  gasPrice: string | null;
                  maxFeePerGas: string | null;
                  maxPriorityFeePerGas: string | null;
                  transactionType: number | null;
                  transactionHash: string | null;
                  queuedAt: string | null;
                  sentAt: string | null;
                  minedAt: string | null;
                  cancelledAt: string | null;
                  deployedContractAddress: string | null;
                  deployedContractType: string | null;
                  errorMessage: string | null;
                  sentAtBlockNumber: number | null;
                  blockNumber: number | null;
                  status: string | null;
                  /** @description The number of retry attempts */
                  retryCount: number;
                  retryGasValues: boolean | null;
                  retryMaxFeePerGas: string | null;
                  retryMaxPriorityFeePerGas: string | null;
                  signerAddress: string | null;
                  accountAddress: string | null;
                  target: string | null;
                  sender: string | null;
                  initCode: string | null;
                  callData: string | null;
                  callGasLimit: string | null;
                  verificationGasLimit: string | null;
                  preVerificationGas: string | null;
                  paymasterAndData: string | null;
                  userOpHash: string | null;
                  functionName: string | null;
                  functionArgs: string | null;
                  onChainTxStatus: number | null;
                })[];
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Reset all nonces
   * @description Reset nonces for all backend wallets. This is for debugging purposes and does not impact held tokens.
   */
  resetNonces: {
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              status: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get backend-wallet nonces from DB
   * @description Get nonce for a backend wallets from DB. This is for debugging purposes and does not impact held tokens.
   */
  getNonce: {
    parameters: {
      path: {
        /**
         * @description Chain name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Backend wallet address
         * @example 0x...
         */
        walletAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              status: string;
              nonce: string;
              walletAddress: string;
              chain: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Simulate a transaction
   * @description Simulate a transaction with transaction parameters
   */
  simulateTransaction: {
    parameters: {
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        chain: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The contract address */
          toAddress: string;
          /** @description The amount of native currency */
          value?: string;
          /** @description The function to call on the contract */
          functionName?: string;
          args?: unknown[];
          /** @description Raw calldata */
          data?: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Simulation Success */
              success: boolean;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get wallets configuration
   * @description Get wallets configuration
   */
  getWalletsConfiguration: {
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @enum {string} */
              type: "local";
            } | {
              /** @enum {string} */
              type: "aws-kms";
              awsAccessKeyId: string;
              awsRegion: string;
            } | {
              /** @enum {string} */
              type: "gcp-kms";
              gcpApplicationProjectId: string;
              gcpKmsLocationId: string;
              gcpKmsKeyRingId: string;
              gcpApplicationCredentialEmail: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Update wallets configuration
   * @description Update wallets configuration
   */
  updateWalletsConfiguration: {
    requestBody?: {
      content: {
        "application/json": {
          /** @enum {string} */
          type: "local";
        } | {
          /** @enum {string} */
          type: "aws-kms";
          awsAccessKeyId: string;
          awsSecretAccessKey: string;
          awsRegion: string;
        } | {
          /** @enum {string} */
          type: "gcp-kms";
          gcpApplicationProjectId: string;
          gcpKmsLocationId: string;
          gcpKmsKeyRingId: string;
          gcpApplicationCredentialEmail: string;
          gcpApplicationCredentialPrivateKey: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @enum {string} */
              type: "local";
            } | {
              /** @enum {string} */
              type: "aws-kms";
              awsAccessKeyId: string;
              awsRegion: string;
            } | {
              /** @enum {string} */
              type: "gcp-kms";
              gcpApplicationProjectId: string;
              gcpKmsLocationId: string;
              gcpKmsKeyRingId: string;
              gcpApplicationCredentialEmail: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get chain overrides configuration
   * @description Get chain overrides configuration
   */
  getChainsConfiguration: {
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: string | null;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Update chain overrides configuration
   * @description Update chain overrides configuration
   */
  updateChainsConfiguration: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "chainOverrides": [
         *     {
         *       "name": "Localhost",
         *       "chain": "ETH",
         *       "rpc": [
         *         "http://localhost:8545"
         *       ],
         *       "nativeCurrency": {
         *         "name": "Ether",
         *         "symbol": "ETH",
         *         "decimals": 18
         *       },
         *       "chainId": 1337,
         *       "slug": "localhost"
         *     }
         *   ]
         * }
         */
        "application/json": {
          chainOverrides: {
              name: string;
              chain: string;
              rpc: string[];
              nativeCurrency: {
                name: string;
                symbol: string;
                decimals: number;
              };
              chainId: number;
              slug: string;
            }[];
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: string | null;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get transaction processing configuration
   * @description Get transactions processing configuration
   */
  getTransactionConfiguration: {
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              minTxsToProcess: number;
              maxTxsToProcess: number;
              minedTxListenerCronSchedule: string | null;
              maxTxsToUpdate: number;
              retryTxListenerCronSchedule: string | null;
              minEllapsedBlocksBeforeRetry: number;
              maxFeePerGasForRetries: string;
              maxPriorityFeePerGasForRetries: string;
              maxRetriesPerTx: number;
              clearCacheCronSchedule: string | null;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Update transaction processing configuration
   * @description Update transaction processing configuration
   */
  updateTransactionConfiguration: {
    requestBody?: {
      content: {
        "application/json": {
          minTxsToProcess?: number;
          maxTxsToProcess?: number;
          minedTxListenerCronSchedule?: string | null;
          maxTxsToUpdate?: number;
          retryTxListenerCronSchedule?: string | null;
          minEllapsedBlocksBeforeRetry?: number;
          maxFeePerGasForRetries?: string;
          maxPriorityFeePerGasForRetries?: string;
          maxRetriesPerTx?: number;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              minTxsToProcess: number;
              maxTxsToProcess: number;
              minedTxListenerCronSchedule: string | null;
              maxTxsToUpdate: number;
              retryTxListenerCronSchedule: string | null;
              minEllapsedBlocksBeforeRetry: number;
              maxFeePerGasForRetries: string;
              maxPriorityFeePerGasForRetries: string;
              maxRetriesPerTx: number;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get auth configuration
   * @description Get auth configuration
   */
  getAuthConfiguration: {
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              domain: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Update auth configuration
   * @description Update auth configuration
   */
  updateAuthConfiguration: {
    requestBody: {
      content: {
        "application/json": {
          domain: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              domain: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get wallet-balance configuration
   * @description Get wallet-balance configuration
   */
  getBackendWalletBalanceConfiguration: {
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Minimum wallet balance in wei */
              minWalletBalance: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Update backend wallet balance configuration
   * @description Update backend wallet balance configuration
   */
  updateBackendWalletBalanceConfiguration: {
    requestBody?: {
      content: {
        "application/json": {
          /** @description Minimum wallet balance in wei */
          minWalletBalance?: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Minimum wallet balance in wei */
              minWalletBalance: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get CORS configuration
   * @description Get CORS configuration
   */
  getCorsConfiguration: {
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: string[];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Set CORS URLs
   * @description Replaces the CORS URLs to allow client-side calls to Engine
   */
  setUrlsToCorsConfiguration: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "urls": [
         *     "https://example.com",
         *     "https://subdomain.example.com"
         *   ]
         * }
         */
        "application/json": {
          urls: string[];
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: string[];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Add a CORS URL
   * @description Add a URL to allow client-side calls to Engine
   */
  addUrlToCorsConfiguration: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "urlsToAdd": [
         *     "https://example.com",
         *     "https://subdomain.example.com"
         *   ]
         * }
         */
        "application/json": {
          urlsToAdd: string[];
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: string[];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Remove CORS URLs
   * @description Remove URLs from CORS configuration
   */
  removeUrlToCorsConfiguration: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "urlsToRemove": [
         *     "https://example.com",
         *     "https://subdomain.example.com"
         *   ]
         * }
         */
        "application/json": {
          urlsToRemove: string[];
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: string[];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get cache configuration
   * @description Get cache configuration
   */
  getCacheConfiguration: {
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              clearCacheCronSchedule: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Update cache configuration
   * @description Update cache configuration
   */
  updateCacheConfiguration: {
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Cron expression for clearing cache. It should be in the format of 'ss mm hh * * *' where ss is seconds, mm is minutes and hh is hours. Seconds should not be '*' or less than 10
           * @default *\/30 * * * * *
           */
          clearCacheCronSchedule: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              clearCacheCronSchedule: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get Contract Subscriptions configuration
   * @description Get the configuration for Contract Subscriptions
   */
  getContractSubscriptionsConfiguration: {
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              maxBlocksToIndex: number;
              contractSubscriptionsRequeryDelaySeconds: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Update Contract Subscriptions configuration
   * @description Update the configuration for Contract Subscriptions
   */
  updateContractSubscriptionsConfiguration: {
    requestBody?: {
      content: {
        "application/json": {
          maxBlocksToIndex?: number;
          contractSubscriptionsRequeryDelaySeconds?: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              maxBlocksToIndex: number;
              contractSubscriptionsRequeryDelaySeconds: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Revoke role
   * @description Revoke a role from a specific wallet.
   */
  revoke: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The role to revoke */
          role: string;
          /** @description The address to revoke the role from */
          address: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get webhooks event types
   * @description Get the all the webhooks event types
   */
  getEventTypes: {
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: ("queued_transaction" | "sent_transaction" | "mined_transaction" | "errored_transaction" | "cancelled_transaction" | "all_transactions" | "backend_wallet_balance" | "auth" | "contract_subscription")[];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Grant role
   * @description Grant a role to a specific wallet.
   */
  grant: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The role to grant */
          role: string;
          /** @description The address to grant the role to */
          address: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * List public keys
   * @description List the public keys configured with Engine
   */
  list: {
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
                /** @description A unique identifier for the keypair */
                hash: string;
                /** @description The public key */
                publicKey: string;
                /** @description The keypair algorithm. */
                algorithm: string;
                /** @description A description for the keypair. */
                label?: string;
                /**
                 * Format: date
                 * @description When the keypair was added
                 */
                createdAt: string;
                /**
                 * Format: date
                 * @description When the keypair was updated
                 */
                updatedAt: string;
              }[];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Add public key
   * @description Add the public key for a keypair
   */
  add: {
    requestBody: {
      content: {
        "application/json": {
          /** @description The public key of your keypair beginning with '-----BEGIN PUBLIC KEY-----'. */
          publicKey: string;
          algorithm: "RS256" | "RS384" | "RS512" | "ES256" | "ES384" | "ES512" | "PS256" | "PS384" | "PS512";
          label?: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              keypair: {
                /** @description A unique identifier for the keypair */
                hash: string;
                /** @description The public key */
                publicKey: string;
                /** @description The keypair algorithm. */
                algorithm: string;
                /** @description A description for the keypair. */
                label?: string;
                /**
                 * Format: date
                 * @description When the keypair was added
                 */
                createdAt: string;
                /**
                 * Format: date
                 * @description When the keypair was updated
                 */
                updatedAt: string;
              };
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Remove public key
   * @description Remove the public key for a keypair
   */
  remove: {
    requestBody: {
      content: {
        "application/json": {
          hash: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              success: boolean;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get details
   * @description Get the details for a token in an ERC-1155 contract.
   */
  get: {
    parameters: {
      query: {
        /**
         * @description The tokenId of the NFT to retrieve
         * @example 0
         */
        tokenId: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description ERC1155 Contract Address on the Chain
         * @example 0x19411143085F1ec7D21a7cc07000CBA5188C5e8e
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              metadata: {
                id: string;
                uri: string;
                name?: string | number | null;
                description?: string | null;
                image?: string | null;
                external_url?: string | null;
                animation_url?: string | null;
                properties?: unknown;
                attributes?: unknown;
                [key: string]: unknown;
              };
              owner: string;
              type: "ERC1155" | "ERC721" | "metaplex";
              supply: string;
              quantityOwned?: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Relay a meta-transaction
   * @description Relay an EIP-2771 meta-transaction
   */
  relay: {
    parameters: {
      path: {
        relayerId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @enum {string} */
          type: "forward";
          request: {
            from: string;
            to: string;
            value: string;
            gas: string;
            nonce: string;
            data: string;
            chainid?: string;
          };
          signature: string;
          forwarderAddress: string;
        } | {
          /** @enum {string} */
          type: "permit";
          request: {
            to: string;
            owner: string;
            spender: string;
            value: string;
            nonce: string;
            deadline: string;
          };
          signature: string;
        } | {
          /** @enum {string} */
          type: "execute-meta-transaction";
          request: {
            from: string;
            to: string;
            data: string;
          };
          signature: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Read from contract
   * @description Call a read function on a contract.
   */
  read: {
    parameters: {
      query: {
        /**
         * @description Name of the function to call on Contract
         * @example balanceOf
         */
        functionName: string;
        /**
         * @description Arguments for the function. Comma Separated
         * @example
         */
        args?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result?: number | string | Record<string, never> | unknown[] | boolean | [unknown, unknown];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Write to contract
   * @description Call a write function on a contract.
   */
  write: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "functionName": "transferFrom",
         *   "args": [
         *     "0x1946267d81Fb8aDeeEa28e6B98bcD446c8248473",
         *     "0x3EcDBF3B911d0e9052b64850693888b008e18373",
         *     "0"
         *   ]
         * }
         */
        "application/json": {
          /** @description The function to call on the contract */
          functionName: string;
          args: unknown[];
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get all events
   * @description Get a list of all blockchain events for this contract.
   */
  getAllEvents: {
    parameters: {
      query?: {
        fromBlock?: number | string;
        toBlock?: number | string;
        order?: "asc" | "desc";
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
                [key: string]: unknown;
              }[];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get events
   * @description Get details of all events implemented by a contract.
   */
  getEvents: {
    parameters: {
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
                name: string;
                inputs: {
                    type?: string;
                    name?: string;
                    stateMutability?: string;
                    components?: {
                        type?: string;
                        name?: string;
                        internalType?: string;
                      }[];
                  }[];
                outputs: {
                    type?: string;
                    name?: string;
                    stateMutability?: string;
                    components?: {
                        type?: string;
                        name?: string;
                        internalType?: string;
                      }[];
                  }[];
                comment?: string;
              }[];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get ABI
   * @description Get the ABI of a contract.
   */
  getAbi: {
    parameters: {
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
                type: string;
                name: string;
                inputs: {
                    type?: string;
                    name?: string;
                    stateMutability?: string;
                    components?: {
                        type?: string;
                        name?: string;
                        internalType?: string;
                      }[];
                  }[];
              }[];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get extensions
   * @description Get all detected extensions for a contract.
   */
  getExtensions: {
    parameters: {
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            /** @description Array of detected extension names */
            result: string[];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get functions
   * @description Get details of all functions implemented by the contract.
   */
  getFunctions: {
    parameters: {
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
                name: string;
                inputs: {
                    type?: string;
                    name?: string;
                    stateMutability?: string;
                    components?: {
                        type?: string;
                        name?: string;
                        internalType?: string;
                      }[];
                  }[];
                outputs: {
                    type?: string;
                    name?: string;
                    stateMutability?: string;
                    components?: {
                        type?: string;
                        name?: string;
                        internalType?: string;
                      }[];
                  }[];
                comment?: string;
                signature: string;
                stateMutability: string;
              }[];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get wallets for role
   * @description Get all wallets with a specific role for a contract.
   */
  getRole: {
    parameters: {
      query: {
        /** @description The role to list wallet members */
        role: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: string[];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get royalty details
   * @description Gets the royalty recipient and BPS (basis points) of the smart contract.
   */
  getDefaultRoyaltyInfo: {
    parameters: {
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description The royalty fee in BPS (basis points). 100 = 1%. */
              seller_fee_basis_points: number;
              /** @description The wallet address that will receive the royalty fees. */
              fee_recipient: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get token royalty details
   * @description Gets the royalty recipient and BPS (basis points) of a particular token in the contract.
   */
  getTokenRoyaltyInfo: {
    parameters: {
      path: {
        tokenId: string;
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description The royalty fee in BPS (basis points). 100 = 1%. */
              seller_fee_basis_points: number;
              /** @description The wallet address that will receive the royalty fees. */
              fee_recipient: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Set royalty details
   * @description Set the royalty recipient and fee for the smart contract.
   */
  setDefaultRoyaltyInfo: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "fee_recipient": "0x1946267d81Fb8aDeeEa28e6B98bcD446c8248473",
         *   "seller_fee_basis_points": 100
         * }
         */
        "application/json": {
          /** @description The royalty fee in BPS (basis points). 100 = 1%. */
          seller_fee_basis_points: number;
          /** @description The wallet address that will receive the royalty fees. */
          fee_recipient: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Set token royalty details
   * @description Set the royalty recipient and fee for a particular token in the contract.
   */
  setTokenRoyaltyInfo: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "fee_recipient": "0x1946267d81Fb8aDeeEa28e6B98bcD446c8248473",
         *   "seller_fee_basis_points": 100,
         *   "token_id": "0"
         * }
         */
        "application/json": {
          /** @description The royalty fee in BPS (basis points). 100 = 1%. */
          seller_fee_basis_points: number;
          /** @description The wallet address that will receive the royalty fees. */
          fee_recipient: string;
          /** @description The token ID to set the royalty info for. */
          token_id: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Deploy Edition
   * @description Deploy an Edition contract.
   */
  deployEdition: {
    parameters: {
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "contractMetadata": {
         *     "name": "My Edition",
         *     "symbol": "ED",
         *     "primary_sale_recipient": "<your-wallet-address>"
         *   }
         * }
         */
        "application/json": {
          contractMetadata: {
            name: string;
            description?: string;
            image?: string;
            external_link?: string;
            app_uri?: string;
            defaultAdmin?: string;
            /** @default 0 */
            seller_fee_basis_points: number;
            /** @default 0x0000000000000000000000000000000000000000 */
            fee_recipient: string;
            /** @default */
            symbol: string;
            /** @default 0 */
            platform_fee_basis_points: number;
            /** @default 0x0000000000000000000000000000000000000000 */
            platform_fee_recipient: string;
            primary_sale_recipient?: string;
            /** @default [] */
            trusted_forwarders: string[];
          };
          /** @description Version of the contract to deploy. Defaults to latest. */
          version?: string;
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              queueId?: string;
              deployedAddress?: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Deploy Edition Drop
   * @description Deploy an Edition Drop contract.
   */
  deployEditionDrop: {
    parameters: {
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "contractMetadata": {
         *     "name": "My Edition Drop",
         *     "symbol": "EDD",
         *     "primary_sale_recipient": "<your-wallet-address>"
         *   }
         * }
         */
        "application/json": {
          contractMetadata: {
            name: string;
            description?: string;
            image?: string;
            external_link?: string;
            app_uri?: string;
            defaultAdmin?: string;
            /** @default 0 */
            seller_fee_basis_points: number;
            /** @default 0x0000000000000000000000000000000000000000 */
            fee_recipient: string;
            merkle?: {
              [key: string]: string;
            };
            /** @default */
            symbol: string;
            /** @default 0 */
            platform_fee_basis_points: number;
            /** @default 0x0000000000000000000000000000000000000000 */
            platform_fee_recipient: string;
            primary_sale_recipient?: string;
            /** @default [] */
            trusted_forwarders: string[];
          };
          /** @description Version of the contract to deploy. Defaults to latest. */
          version?: string;
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              queueId?: string;
              deployedAddress?: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Deploy Marketplace
   * @description Deploy a Marketplace contract.
   */
  deployMarketplaceV3: {
    parameters: {
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "contractMetadata": {
         *     "name": "My Marketplace"
         *   }
         * }
         */
        "application/json": {
          contractMetadata: {
            name: string;
            description?: string;
            image?: string;
            external_link?: string;
            app_uri?: string;
            defaultAdmin?: string;
            /** @default 0 */
            platform_fee_basis_points: number;
            /** @default 0x0000000000000000000000000000000000000000 */
            platform_fee_recipient: string;
            /** @default [] */
            trusted_forwarders: string[];
          };
          /** @description Version of the contract to deploy. Defaults to latest. */
          version?: string;
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              queueId?: string;
              deployedAddress?: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Deploy Multiwrap
   * @description Deploy a Multiwrap contract.
   */
  deployMultiwrap: {
    parameters: {
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "contractMetadata": {
         *     "name": "My Multiwrap",
         *     "symbol": "Mw"
         *   }
         * }
         */
        "application/json": {
          contractMetadata: {
            name: string;
            description?: string;
            image?: string;
            external_link?: string;
            app_uri?: string;
            defaultAdmin?: string;
            /** @default 0 */
            seller_fee_basis_points: number;
            /** @default 0x0000000000000000000000000000000000000000 */
            fee_recipient: string;
            /** @default */
            symbol: string;
            /** @default [] */
            trusted_forwarders: string[];
          };
          /** @description Version of the contract to deploy. Defaults to latest. */
          version?: string;
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              queueId?: string;
              deployedAddress?: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Deploy NFT Collection
   * @description Deploy an NFT Collection contract.
   */
  deployNFTCollection: {
    parameters: {
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "contractMetadata": {
         *     "name": "My NFT Collection",
         *     "symbol": "NFT"
         *   }
         * }
         */
        "application/json": {
          contractMetadata: {
            name: string;
            description?: string;
            image?: string;
            external_link?: string;
            app_uri?: string;
            defaultAdmin?: string;
            /** @default 0 */
            seller_fee_basis_points: number;
            /** @default 0x0000000000000000000000000000000000000000 */
            fee_recipient: string;
            /** @default */
            symbol: string;
            /** @default 0 */
            platform_fee_basis_points: number;
            /** @default 0x0000000000000000000000000000000000000000 */
            platform_fee_recipient: string;
            primary_sale_recipient?: string;
            /** @default [] */
            trusted_forwarders: string[];
          };
          /** @description Version of the contract to deploy. Defaults to latest. */
          version?: string;
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              queueId?: string;
              deployedAddress?: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Deploy NFT Drop
   * @description Deploy an NFT Drop contract.
   */
  deployNFTDrop: {
    parameters: {
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "contractMetadata": {
         *     "name": "My NFT Drop",
         *     "symbol": "NFTD",
         *     "primary_sale_recipient": "<your-wallet-address>"
         *   }
         * }
         */
        "application/json": {
          contractMetadata: {
            name: string;
            description?: string;
            image?: string;
            external_link?: string;
            app_uri?: string;
            defaultAdmin?: string;
            /** @default 0 */
            seller_fee_basis_points: number;
            /** @default 0x0000000000000000000000000000000000000000 */
            fee_recipient: string;
            merkle?: {
              [key: string]: string;
            };
            /** @default */
            symbol: string;
            /** @default 0 */
            platform_fee_basis_points: number;
            /** @default 0x0000000000000000000000000000000000000000 */
            platform_fee_recipient: string;
            primary_sale_recipient?: string;
            /** @default [] */
            trusted_forwarders: string[];
          };
          /** @description Version of the contract to deploy. Defaults to latest. */
          version?: string;
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              queueId?: string;
              deployedAddress?: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Deploy Pack
   * @description Deploy a Pack contract.
   */
  deployPack: {
    parameters: {
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "contractMetadata": {
         *     "name": "My Pack",
         *     "symbol": "PACK"
         *   }
         * }
         */
        "application/json": {
          contractMetadata: {
            name: string;
            description?: string;
            image?: string;
            external_link?: string;
            app_uri?: string;
            defaultAdmin?: string;
            /** @default 0 */
            seller_fee_basis_points: number;
            /** @default 0x0000000000000000000000000000000000000000 */
            fee_recipient: string;
            /** @default */
            symbol: string;
            /** @default 0 */
            platform_fee_basis_points: number;
            /** @default 0x0000000000000000000000000000000000000000 */
            platform_fee_recipient: string;
            /** @default [] */
            trusted_forwarders: string[];
          };
          /** @description Version of the contract to deploy. Defaults to latest. */
          version?: string;
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              queueId?: string;
              deployedAddress?: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Deploy Signature Drop
   * @description Deploy a Signature Drop contract.
   */
  deploySignatureDrop: {
    parameters: {
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "contractMetadata": {
         *     "name": "My NFT Drop",
         *     "symbol": "NFTD",
         *     "primary_sale_recipient": "<your-wallet-address>"
         *   }
         * }
         */
        "application/json": {
          contractMetadata: {
            name: string;
            description?: string;
            image?: string;
            external_link?: string;
            app_uri?: string;
            defaultAdmin?: string;
            /** @default 0 */
            seller_fee_basis_points: number;
            /** @default 0x0000000000000000000000000000000000000000 */
            fee_recipient: string;
            merkle?: {
              [key: string]: string;
            };
            /** @default */
            symbol: string;
            /** @default 0 */
            platform_fee_basis_points: number;
            /** @default 0x0000000000000000000000000000000000000000 */
            platform_fee_recipient: string;
            primary_sale_recipient?: string;
            /** @default [] */
            trusted_forwarders: string[];
          };
          /** @description Version of the contract to deploy. Defaults to latest. */
          version?: string;
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              queueId?: string;
              deployedAddress?: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Deploy Split
   * @description Deploy a Split contract.
   */
  deploySplit: {
    parameters: {
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "contractMetadata": {
         *     "name": "My Split",
         *     "recipients": [
         *       {
         *         "recipient": "0x3EcDBF3B911d0e9052b64850693888b008e18373",
         *         "percent": 50
         *       },
         *       {
         *         "recipient": "0x1946267d81Fb8aDeeEa28e6B98bcD446c8248473",
         *         "percent": 50
         *       }
         *     ]
         *   }
         * }
         */
        "application/json": {
          contractMetadata: {
            name: string;
            description?: string;
            image?: string;
            external_link?: string;
            app_uri?: string;
            defaultAdmin?: string;
            recipients: {
                address: string;
                sharesBps: number;
              }[];
            /** @default [] */
            trusted_forwarders: string[];
          };
          /** @description Version of the contract to deploy. Defaults to latest. */
          version?: string;
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              queueId?: string;
              deployedAddress?: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Deploy Token
   * @description Deploy a Token contract.
   */
  deployToken: {
    parameters: {
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "contractMetadata": {
         *     "name": "My Token",
         *     "symbol": "TKN",
         *     "primary_sale_recipient": "<your-wallet-address>"
         *   }
         * }
         */
        "application/json": {
          contractMetadata: {
            name: string;
            description?: string;
            image?: string;
            external_link?: string;
            app_uri?: string;
            defaultAdmin?: string;
            /** @default */
            symbol: string;
            /** @default 0 */
            platform_fee_basis_points: number;
            /** @default 0x0000000000000000000000000000000000000000 */
            platform_fee_recipient: string;
            primary_sale_recipient?: string;
            /** @default [] */
            trusted_forwarders: string[];
          };
          /** @description Version of the contract to deploy. Defaults to latest. */
          version?: string;
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              queueId?: string;
              deployedAddress?: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Deploy Token Drop
   * @description Deploy a Token Drop contract.
   */
  deployTokenDrop: {
    parameters: {
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "contractMetadata": {
         *     "name": "My Signature Drop",
         *     "symbol": "SIGD",
         *     "primary_sale_recipient": "<your-wallet-address>"
         *   }
         * }
         */
        "application/json": {
          contractMetadata: {
            name: string;
            description?: string;
            image?: string;
            external_link?: string;
            app_uri?: string;
            defaultAdmin?: string;
            merkle?: {
              [key: string]: string;
            };
            /** @default */
            symbol: string;
            /** @default 0 */
            platform_fee_basis_points: number;
            /** @default 0x0000000000000000000000000000000000000000 */
            platform_fee_recipient: string;
            primary_sale_recipient?: string;
            /** @default [] */
            trusted_forwarders: string[];
          };
          /** @description Version of the contract to deploy. Defaults to latest. */
          version?: string;
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              queueId?: string;
              deployedAddress?: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Deploy Vote
   * @description Deploy a Vote contract.
   */
  deployVote: {
    parameters: {
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "contractMetadata": {
         *     "name": "My Vote"
         *   }
         * }
         */
        "application/json": {
          contractMetadata: {
            name: string;
            description?: string;
            image?: string;
            external_link?: string;
            app_uri?: string;
            defaultAdmin?: string;
            /** @default 0 */
            voting_delay_in_blocks: number;
            /** @default 1 */
            voting_period_in_blocks: number;
            voting_token_address: string;
            /** @default 0 */
            voting_quorum_fraction: number;
            /** @default 0 */
            proposal_token_threshold: string;
            /** @default [] */
            trusted_forwarders: string[];
          };
          /** @description Version of the contract to deploy. Defaults to latest. */
          version?: string;
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              queueId?: string;
              deployedAddress?: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Deploy published contract
   * @description Deploy a published contract to the blockchain.
   */
  deployPublished: {
    parameters: {
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Address or ENS of the publisher of the contract
         * @example deployer.thirdweb.eth
         */
        publisher: string;
        /**
         * @description Name of the published contract to deploy
         * @example AirdropERC20
         */
        contractName: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "constructorParams": [
         *     "0x1946267d81Fb8aDeeEa28e6B98bcD446c8248473"
         *   ]
         * }
         */
        "application/json": {
          /** @description Constructor arguments for the deployment. */
          constructorParams: unknown[];
          /** @description Version of the contract to deploy. Defaults to latest. */
          version?: string;
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            queueId?: string;
            /** @description Not all contracts return a deployed address. */
            deployedAddress?: string;
            message?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get contract types
   * @description Get all prebuilt contract types.
   */
  contractTypes: {
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: string[];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get transaction status for a group
   * @description Get the status for a transaction group.
   */
  status: {
    parameters: {
      path: {
        groupId: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: ({
                queueId: string | null;
                chainId: string | null;
                fromAddress: string | null;
                toAddress: string | null;
                data: string | null;
                extension: string | null;
                value: string | null;
                nonce: number | null;
                gasLimit: string | null;
                gasPrice: string | null;
                maxFeePerGas: string | null;
                maxPriorityFeePerGas: string | null;
                transactionType: number | null;
                transactionHash: string | null;
                queuedAt: string | null;
                sentAt: string | null;
                minedAt: string | null;
                cancelledAt: string | null;
                deployedContractAddress: string | null;
                deployedContractType: string | null;
                errorMessage: string | null;
                sentAtBlockNumber: number | null;
                blockNumber: number | null;
                status: string | null;
                /** @description The number of retry attempts */
                retryCount: number;
                retryGasValues: boolean | null;
                retryMaxFeePerGas: string | null;
                retryMaxPriorityFeePerGas: string | null;
                signerAddress: string | null;
                accountAddress: string | null;
                target: string | null;
                sender: string | null;
                initCode: string | null;
                callData: string | null;
                callGasLimit: string | null;
                verificationGasLimit: string | null;
                preVerificationGas: string | null;
                paymasterAndData: string | null;
                userOpHash: string | null;
                functionName: string | null;
                functionArgs: string | null;
                onChainTxStatus: number | null;
              })[];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get all deployment transactions
   * @description Get all transaction requests to deploy contracts.
   */
  getAllDeployedContracts: {
    parameters: {
      query: {
        /**
         * @description This parameter allows the user to specify the page number for pagination purposes
         * @example 1
         */
        page: string;
        /**
         * @description This parameter defines the maximum number of transaction request data to return per page.
         * @example 10
         */
        limit: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              transactions: ({
                  queueId: string | null;
                  chainId: string | null;
                  fromAddress: string | null;
                  toAddress: string | null;
                  data: string | null;
                  extension: string | null;
                  value: string | null;
                  nonce: number | null;
                  gasLimit: string | null;
                  gasPrice: string | null;
                  maxFeePerGas: string | null;
                  maxPriorityFeePerGas: string | null;
                  transactionType: number | null;
                  transactionHash: string | null;
                  queuedAt: string | null;
                  sentAt: string | null;
                  minedAt: string | null;
                  cancelledAt: string | null;
                  deployedContractAddress: string | null;
                  deployedContractType: string | null;
                  errorMessage: string | null;
                  sentAtBlockNumber: number | null;
                  blockNumber: number | null;
                  status: string | null;
                  /** @description The number of retry attempts */
                  retryCount: number;
                  retryGasValues: boolean | null;
                  retryMaxFeePerGas: string | null;
                  retryMaxPriorityFeePerGas: string | null;
                  signerAddress: string | null;
                  accountAddress: string | null;
                  target: string | null;
                  sender: string | null;
                  initCode: string | null;
                  callData: string | null;
                  callGasLimit: string | null;
                  verificationGasLimit: string | null;
                  preVerificationGas: string | null;
                  paymasterAndData: string | null;
                  userOpHash: string | null;
                  functionName: string | null;
                  functionArgs: string | null;
                  onChainTxStatus: number | null;
                })[];
              totalCount: number;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Retry transaction
   * @description Retry a transaction with updated gas settings.
   */
  retry: {
    requestBody: {
      content: {
        "application/json": {
          /** @description Transaction queue ID */
          queueId: string;
          maxFeePerGas: string;
          maxPriorityFeePerGas: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              message: string;
              status: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Retry transaction (synchronous)
   * @description Synchronously retry a transaction with updated gas settings.
   */
  syncRetry: {
    requestBody: {
      content: {
        "application/json": {
          /** @description Transaction queue ID */
          queueId: string;
          maxFeePerGas?: string;
          maxPriorityFeePerGas?: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              transactionHash: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Cancel transaction
   * @description Attempt to cancel a transaction by sending a null transaction with a higher gas setting. This transaction is not guaranteed to be cancelled.
   */
  cancel: {
    requestBody: {
      content: {
        "application/json": {
          /** @description Transaction queue ID */
          queueId: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Transaction queue ID */
              queueId: string;
              /** @description Response status */
              status: string;
              /** @description Response message */
              message: string;
              /** @description Transaction hash of the on-chain cancel transaction */
              transactionHash?: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Send a signed transaction
   * @description Send a signed transaction
   */
  sendRawTransaction: {
    parameters: {
      path: {
        chain: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          signedTransaction: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              transactionHash: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Send a signed user operation
   * @description Send a signed user operation
   */
  sendSignedUserOp: {
    parameters: {
      path: {
        chain: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          signedUserOp: unknown;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              userOpHash: string;
            };
          } | {
            error: {
              message: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get transaction receipt from transaction hash
   * @description Get the transaction receipt from a transaction hash.
   */
  txHashReceipt: {
    parameters: {
      path: {
        /**
         * @description Transaction hash
         * @example 0xd9bcba8f5bc4ce5bf4d631b2a0144329c1df3b56ddb9fc64637ed3a4219dd087
         */
        txHash: string;
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: ({
              to?: string;
              from?: string;
              contractAddress?: string | null;
              transactionIndex?: number;
              root?: string;
              gasUsed?: string;
              logsBloom?: string;
              blockHash?: string;
              transactionHash?: string;
              logs?: unknown[];
              blockNumber?: number;
              confirmations?: number;
              cumulativeGasUsed?: string;
              effectiveGasPrice?: string;
              byzantium?: boolean;
              type?: number;
              status?: number;
            }) | null;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get transaction receipt from user-op hash
   * @description Get the transaction receipt from a user-op hash.
   */
  useropHashReceipt: {
    parameters: {
      path: {
        /**
         * @description User operation hash
         * @example 0xa5a579c6fd86c2d8a4d27f5bb22796614d3a31bbccaba8f3019ec001e001b95f
         */
        userOpHash: string;
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: unknown;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get all smart accounts
   * @description Get all the smart accounts for this account factory.
   */
  getAllAccounts: {
    parameters: {
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            /** @description The account addresses of all the accounts in this factory */
            result: string[];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get associated smart accounts
   * @description Get all the smart accounts for this account factory associated with the specific admin wallet.
   */
  getAssociatedAccounts: {
    parameters: {
      query: {
        /** @description The address of the signer to get associated accounts from */
        signerAddress: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            /** @description The account addresses of all the accounts with a specific signer in this factory */
            result: string[];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Check if deployed
   * @description Check if a smart account has been deployed to the blockchain.
   */
  isAccountDeployed: {
    parameters: {
      query: {
        /** @description The address of the admin to check if the account address is deployed */
        adminAddress: string;
        /** @description Extra data to use in predicting the account address */
        extraData?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            /** @description Whether or not the account has been deployed */
            result: boolean;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Predict smart account address
   * @description Get the counterfactual address of a smart account.
   */
  predictAccountAddress: {
    parameters: {
      query: {
        /** @description The address of the admin to predict the account address for */
        adminAddress: string;
        /** @description Extra data to add to use in predicting the account address */
        extraData?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            /** @description New account counter-factual address. */
            result: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Create smart account
   * @description Create a smart account for this account factory.
   */
  createAccount: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "adminAddress": "0x3ecdbf3b911d0e9052b64850693888b008e18373"
         * }
         */
        "application/json": {
          /** @description The admin address to create an account for */
          adminAddress: string;
          /** @description Extra data to add to use in creating the account address */
          extraData?: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              queueId?: string;
              deployedAddress?: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get all admins
   * @description Get all admins for a smart account.
   */
  getAllAdmins: {
    parameters: {
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            /** @description The address of the admins on this account */
            result: string[];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get all session keys
   * @description Get all session keys for a smart account.
   */
  getAllSessions: {
    parameters: {
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
                signerAddress: string;
                startDate: string;
                expirationDate: string;
                nativeTokenLimitPerTransaction: string;
                approvedCallTargets: string[];
              }[];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Grant admin
   * @description Grant a smart account's admin permission.
   */
  grantAdmin: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "signerAddress": "0x3ecdbf3b911d0e9052b64850693888b008e18373"
         * }
         */
        "application/json": {
          /** @description Address to grant admin permissions to */
          signerAddress: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Revoke admin
   * @description Revoke a smart account's admin permission.
   */
  revokeAdmin: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "walletAddress": "0x3ecdbf3b911d0e9052b64850693888b008e18373"
         * }
         */
        "application/json": {
          /** @description Address to revoke admin permissions from */
          walletAddress: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Create session key
   * @description Create a session key for a smart account.
   */
  grantSession: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "signerAddress": "0x3ecdbf3b911d0e9052b64850693888b008e18373",
         *   "startDate": "2021-01-01T00:00:00.000Z",
         *   "expirationDate": "2022-01-01T00:10:00.000Z",
         *   "nativeTokenLimitPerTransaction": "1000000000000000000",
         *   "approvedCallTargets": [
         *     "0x1946267d81Fb8aDeeEa28e6B98bcD446c8248473"
         *   ]
         * }
         */
        "application/json": {
          signerAddress: string;
          startDate: string;
          expirationDate: string;
          nativeTokenLimitPerTransaction: string;
          approvedCallTargets: string[];
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Revoke session key
   * @description Revoke a session key for a smart account.
   */
  revokeSession: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "walletAddress": "0x3ecdbf3b911d0e9052b64850693888b008e18373"
         * }
         */
        "application/json": {
          /** @description Address to revoke session from */
          walletAddress: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Update session key
   * @description Update a session key for a smart account.
   */
  updateSession: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "signerAddress": "0x3ecdbf3b911d0e9052b64850693888b008e18373",
         *   "approvedCallTargets": [
         *     "0x1946267d81Fb8aDeeEa28e6B98bcD446c8248473"
         *   ]
         * }
         */
        "application/json": {
          signerAddress: string;
          approvedCallTargets: string[];
          startDate?: string;
          expirationDate?: string;
          nativeTokenLimitPerTransaction?: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get token allowance
   * @description Get the allowance of a specific wallet for an ERC-20 contract.
   */
  allowanceOf: {
    parameters: {
      query: {
        /**
         * @description Address of the wallet who owns the funds
         * @example 0x3EcDBF3B911d0e9052b64850693888b008e18373
         */
        ownerWallet: string;
        /**
         * @description Address of the wallet to check token allowance
         * @example 0x1946267d81Fb8aDeeEa28e6B98bcD446c8248473
         */
        spenderWallet: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description ERC20 Contract Address on the Chain
         * @example 0x365b83D67D5539C6583b9c0266A548926Bf216F4
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              name: string;
              symbol: string;
              decimals: string;
              /** @description Value in wei */
              value: string;
              /** @description Value in tokens */
              displayValue: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get balance
   * @description Get the balance of a specific wallet address for this ERC-1155 contract.
   */
  balanceOf: {
    parameters: {
      query: {
        /**
         * @description Address of the wallet to check NFT balance
         * @example 0x1946267d81Fb8aDeeEa28e6B98bcD446c8248473
         */
        walletAddress: string;
        /**
         * @description The tokenId of the NFT to check balance of
         * @example 0
         */
        tokenId: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description ERC1155 Contract Address on the Chain
         * @example 0x19411143085F1ec7D21a7cc07000CBA5188C5e8e
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get total supply
   * @description Get the total supply in circulation for this ERC-1155 contract.
   */
  totalSupply: {
    parameters: {
      query: {
        /**
         * @description The tokenId of the NFT to retrieve
         * @example 0
         */
        tokenId: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description ERC1155 Contract Address on the Chain
         * @example 0x19411143085F1ec7D21a7cc07000CBA5188C5e8e
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Generate signature
   * @description Generate a signature granting access for another wallet to mint tokens from this ERC-721 contract. This method is typically called by the token contract owner.
   */
  signatureGenerate: {
    parameters: {
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description ERC721 Contract Address on the Chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "to": "0x1946267d81Fb8aDeeEa28e6B98bcD446c8248473",
         *   "quantity": "1",
         *   "metadata": {
         *     "name": "test tokenII",
         *     "description": "test token"
         *   },
         *   "mintStartTime": "2023-06-07T21:51:33.386Z",
         *   "mintEndTime": "2023-07-07T21:51:33.386Z"
         * }
         */
        "application/json": {
          /** @description The wallet address that can use this signature to mint tokens. This is to prevent another wallet from intercepting the signature and using it to mint tokens for themselves. */
          to: string;
          /** @description The number of tokens this signature can be used to mint. */
          quantity: string;
          metadata: ({
            name?: string | number | null;
            description?: string | null;
            image?: string | null;
            external_url?: string | null;
            animation_url?: string | null;
            properties?: unknown;
            attributes?: unknown;
            background_color?: unknown;
          }) | string;
          /** @description The address that will receive the royalty fees from secondary sales. Defaults to the royaltyRecipient address of the contract. */
          royaltyRecipient?: string;
          /** @description The percentage fee you want to charge for secondary sales. Defaults to the royaltyBps of the contract. */
          royaltyBps?: number;
          /** @description If a price is specified, the funds will be sent to the primarySaleRecipient address. Defaults to the primarySaleRecipient address of the contract. */
          primarySaleRecipient?: string;
          /**
           * @description A unique identifier for the payload, used to prevent replay attacks and other types of exploits.
           *       Note that the input value gets hashed in the actual payload that gets generated.
           *       The smart contract enforces on-chain that no uid gets used more than once,
           *       which means you can deterministically generate the uid to prevent specific exploits.
           */
          uid?: string;
          /** @description The address of the currency to pay for minting the tokens (use the price field to specify the price). Defaults to NATIVE_TOKEN_ADDRESS */
          currencyAddress?: string;
          /**
           * @description If you want the user to pay for minting the tokens, you can specify the price per token. Defaults to 0.
           * @default 0
           */
          price?: string;
          mintStartTime?: string | number;
          mintEndTime?: string | number;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              payload: {
                uri: string;
                tokenId: string;
                /** @description The wallet address that can use this signature to mint tokens. This is to prevent another wallet from intercepting the signature and using it to mint tokens for themselves. */
                to: string;
                /** @description The address that will receive the royalty fees from secondary sales. Defaults to the royaltyRecipient address of the contract. */
                royaltyRecipient: string;
                /** @description The number of tokens this signature can be used to mint. */
                quantity: string;
                /** @description The percentage fee you want to charge for secondary sales. Defaults to the royaltyBps of the contract. */
                royaltyBps: string;
                /** @description If a price is specified, the funds will be sent to the primarySaleRecipient address. Defaults to the primarySaleRecipient address of the contract. */
                primarySaleRecipient: string;
                /**
                 * @description A unique identifier for the payload, used to prevent replay attacks and other types of exploits.
                 *       Note that the input value gets hashed in the actual payload that gets generated.
                 *       The smart contract enforces on-chain that no uid gets used more than once,
                 *       which means you can deterministically generate the uid to prevent specific exploits.
                 */
                uid: string;
                metadata: ({
                  name?: string | number | null;
                  description?: string | null;
                  image?: string | null;
                  external_url?: string | null;
                  animation_url?: string | null;
                  properties?: unknown;
                  attributes?: unknown;
                  background_color?: unknown;
                }) | string;
                /** @description The address of the currency to pay for minting the tokens (use the price field to specify the price). Defaults to NATIVE_TOKEN_ADDRESS */
                currencyAddress: string;
                /**
                 * @description If you want the user to pay for minting the tokens, you can specify the price per token. Defaults to 0.
                 * @default 0
                 */
                price: string;
                /** @description The time from which the signature can be used to mint tokens. Defaults to now if value not provided. */
                mintStartTime: number;
                /** @description The time until which the signature can be used to mint tokens. Defaults to 10 years from now. */
                mintEndTime: number;
              };
              signature: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Check if tokens are available for claiming
   * @description Check if tokens are currently available for claiming, optionally specifying if a specific wallet address can claim.
   */
  canClaim: {
    parameters: {
      query: {
        /** @description The amount of tokens to claim. */
        quantity: string;
        /** @description The token ID of the NFT you want to claim. */
        tokenId: string;
        /**
         * @description The wallet address to check if it can claim tokens. This considers all aspects of the active claim phase, including allowlists, previous claims, etc.
         * @example 0x1946267d81Fb8aDeeEa28e6B98bcD446c8248473
         */
        addressToCheck?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: boolean;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get currently active claim phase for a specific token ID.
   * @description Retrieve the currently active claim phase for a specific token ID, if any.
   */
  getActiveClaimConditions: {
    parameters: {
      query: {
        /** @description The token ID of the NFT you want to claim. */
        tokenId: string | number;
        /** @description Provide a boolean value to include the allowlist in the response. */
        withAllowList?: boolean;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              maxClaimableSupply?: string | number;
              /** Format: date-time */
              startTime: string;
              price?: number | string;
              currencyAddress?: string;
              maxClaimablePerWallet?: number | string;
              waitInSeconds?: number | string;
              merkleRootHash: string | number[];
              availableSupply: string;
              currentMintSupply: string;
              /** @description The `CurrencyValue` of the listing. Useful for displaying the price information. */
              currencyMetadata: {
                name: string;
                symbol: string;
                decimals: number;
                value: string;
                displayValue: string;
              };
              metadata?: {
                name?: string;
              };
              snapshot?: null | string[] | (({
                  price?: string | number;
                  currencyAddress?: string;
                  address: string;
                  maxClaimable?: string | number;
                })[]);
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get all the claim phases configured for a specific token ID.
   * @description Get all the claim phases configured for a specific token ID.
   */
  getAllClaimConditions: {
    parameters: {
      query: {
        /** @description The token ID of the NFT you want to get the claim conditions for. */
        tokenId: string | number;
        /** @description Provide a boolean value to include the allowlist in the response. */
        withAllowList?: boolean;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: ({
                maxClaimableSupply?: string | number;
                /** Format: date-time */
                startTime: string;
                price?: number | string;
                currencyAddress?: string;
                maxClaimablePerWallet?: number | string;
                waitInSeconds?: number | string;
                merkleRootHash: string | number[];
                availableSupply: string;
                currentMintSupply: string;
                /** @description The `CurrencyValue` of the listing. Useful for displaying the price information. */
                currencyMetadata: {
                  name: string;
                  symbol: string;
                  decimals: number;
                  value: string;
                  displayValue: string;
                };
                metadata?: {
                  name?: string;
                };
                snapshot?: null | string[] | (({
                    price?: string | number;
                    currencyAddress?: string;
                    address: string;
                    maxClaimable?: string | number;
                  })[]);
              })[];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get claim ineligibility reasons
   * @description Get an array of reasons why a specific wallet address is not eligible to claim tokens, if any.
   */
  claimConditionsGetClaimIneligibilityReasons: {
    parameters: {
      query: {
        /** @description The amount of tokens to claim. */
        quantity: string;
        /**
         * @description The wallet address to check if it can claim tokens.
         * @example 0x1946267d81Fb8aDeeEa28e6B98bcD446c8248473
         */
        addressToCheck?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: (string | ("There is not enough supply to claim." | "This address is not on the allowlist." | "Not enough time since last claim transaction. Please wait." | "Claim phase has not started yet." | "You have already claimed the token." | "Incorrect price or currency." | "Cannot claim more than maximum allowed quantity." | "There are not enough tokens in the wallet to pay for the claim." | "There is no active claim phase at the moment. Please check back in later." | "There is no claim condition set." | "No wallet connected." | "No claim conditions found."))[];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get claimer proofs
   * @description Returns allowlist information and merkle proofs for a given wallet address. Returns null if no proof is found for the given wallet address.
   */
  claimConditionsGetClaimerProofs: {
    parameters: {
      query: {
        /** @description The wallet address to get the merkle proofs for. */
        walletAddress: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: null | {
              price?: string;
              currencyAddress?: string;
              address: string;
              maxClaimable: string;
              proof: string[];
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Set allowance
   * @description Grant a specific wallet address to transfer ERC-20 tokens from the caller wallet.
   */
  setAllowance: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description ERC20 Contract Address on the Chain
         * @example 0x365b83D67D5539C6583b9c0266A548926Bf216F4
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "spenderAddress": "0x3EcDBF3B911d0e9052b64850693888b008e18373",
         *   "amount": "100"
         * }
         */
        "application/json": {
          /** @description Address of the wallet to allow transfers from */
          spenderAddress: string;
          /** @description The number of tokens to give as allowance */
          amount: string;
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Transfer token from wallet
   * @description Transfer an ERC-1155 token from the connected wallet to another wallet. Requires allowance.
   */
  transferFrom: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description ERC1155 Contract Address on the Chain
         * @example 0x19411143085F1ec7D21a7cc07000CBA5188C5e8e
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "from": "0xE79ee09bD47F4F5381dbbACaCff2040f2FbC5803",
         *   "to": "0x3EcDBF3B911d0e9052b64850693888b008e18373",
         *   "tokenId": "0",
         *   "amount": "1"
         * }
         */
        "application/json": {
          /** @description Address of the token owner */
          from: string;
          /** @description Address of the wallet to transferFrom to */
          to: string;
          /** @description the tokenId to transferFrom */
          tokenId: string;
          /** @description the amount of tokens to transfer */
          amount: string;
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Burn token
   * @description Burn ERC-1155 tokens in the caller wallet.
   */
  burn: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description ERC1155 Contract Address on the Chain
         * @example 0x19411143085F1ec7D21a7cc07000CBA5188C5e8e
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "tokenId": "0",
         *   "amount": "1"
         * }
         */
        "application/json": {
          /** @description The token ID to burn */
          tokenId: string;
          /** @description The amount of tokens to burn */
          amount: string;
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Burn token from wallet
   * @description Burn ERC-20 tokens in a specific wallet. Requires allowance.
   */
  burnFrom: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description ERC20 Contract Address on the Chain
         * @example 0x365b83D67D5539C6583b9c0266A548926Bf216F4
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "holderAddress": "0x3EcDBF3B911d0e9052b64850693888b008e18373",
         *   "amount": "0.1"
         * }
         */
        "application/json": {
          /** @description Address of the wallet sending the tokens */
          holderAddress: string;
          /** @description The amount of this token you want to burn */
          amount: string;
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Claim tokens to wallet
   * @description Claim ERC-1155 tokens to a specific wallet.
   */
  claimTo: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description ERC1155 Contract Address on the Chain
         * @example 0x19411143085F1ec7D21a7cc07000CBA5188C5e8e
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "receiver": "0x3EcDBF3B911d0e9052b64850693888b008e18373",
         *   "tokenId": "0",
         *   "quantity": "1"
         * }
         */
        "application/json": {
          /** @description Address of the wallet to claim the NFT to */
          receiver: string;
          /** @description Token ID of the NFT to claim */
          tokenId: string;
          /** @description Quantity of NFTs to mint */
          quantity: string;
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Mint tokens (batch)
   * @description Mint ERC-1155 tokens to multiple wallets in one transaction.
   */
  mintBatchTo: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description ERC1155 Contract Address on the Chain
         * @example 0x19411143085F1ec7D21a7cc07000CBA5188C5e8e
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "receiver": "0x3EcDBF3B911d0e9052b64850693888b008e18373",
         *   "metadataWithSupply": [
         *     {
         *       "metadata": {
         *         "name": "My NFT #1",
         *         "description": "My NFT #1 description",
         *         "image": "ipfs://QmciR3WLJsf2BgzTSjbG5zCxsrEQ8PqsHK7JWGWsDSNo46/nft.png"
         *       },
         *       "supply": "10"
         *     },
         *     {
         *       "metadata": {
         *         "name": "My NFT #2",
         *         "description": "My NFT #2 description",
         *         "image": "ipfs://QmciR3WLJsf2BgzTSjbG5zCxsrEQ8PqsHK7JWGWsDSNo46/nft.png"
         *       },
         *       "supply": "5"
         *     }
         *   ]
         * }
         */
        "application/json": {
          /** @description Address of the wallet to mint the NFT to */
          receiver: string;
          metadataWithSupply: ({
              metadata: ({
                name?: string | number | null;
                description?: string | null;
                image?: string | null;
                external_url?: string | null;
                animation_url?: string | null;
                properties?: unknown;
                attributes?: unknown;
                background_color?: unknown;
              }) | string;
              supply: string;
            })[];
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Mint tokens
   * @description Mint ERC-1155 tokens to a specific wallet.
   */
  mintTo: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description ERC1155 Contract Address on the Chain
         * @example 0x19411143085F1ec7D21a7cc07000CBA5188C5e8e
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "receiver": "0x3EcDBF3B911d0e9052b64850693888b008e18373",
         *   "metadataWithSupply": {
         *     "metadata": {
         *       "name": "My NFT",
         *       "description": "My NFT description",
         *       "image": "ipfs://QmciR3WLJsf2BgzTSjbG5zCxsrEQ8PqsHK7JWGWsDSNo46/nft.png"
         *     },
         *     "supply": "100"
         *   }
         * }
         */
        "application/json": {
          /** @description Address of the wallet to mint the NFT to */
          receiver: string;
          metadataWithSupply: {
            metadata: ({
              name?: string | number | null;
              description?: string | null;
              image?: string | null;
              external_url?: string | null;
              animation_url?: string | null;
              properties?: unknown;
              attributes?: unknown;
              background_color?: unknown;
            }) | string;
            supply: string;
          };
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Signature mint
   * @description Mint ERC-1155 tokens from a generated signature.
   */
  signatureMint: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "payload": {},
         *   "signature": ""
         * }
         */
        "application/json": {
          payload: {
            uri: string;
            tokenId: string;
            /** @description The wallet address that can use this signature to mint tokens. This is to prevent another wallet from intercepting the signature and using it to mint tokens for themselves. */
            to: string;
            /** @description The address that will receive the royalty fees from secondary sales. Defaults to the royaltyRecipient address of the contract. */
            royaltyRecipient: string;
            /** @description The number of tokens this signature can be used to mint. */
            quantity: string;
            /** @description The percentage fee you want to charge for secondary sales. Defaults to the royaltyBps of the contract. */
            royaltyBps: string;
            /** @description If a price is specified, the funds will be sent to the primarySaleRecipient address. Defaults to the primarySaleRecipient address of the contract. */
            primarySaleRecipient: string;
            /**
             * @description A unique identifier for the payload, used to prevent replay attacks and other types of exploits.
             *       Note that the input value gets hashed in the actual payload that gets generated.
             *       The smart contract enforces on-chain that no uid gets used more than once,
             *       which means you can deterministically generate the uid to prevent specific exploits.
             */
            uid: string;
            metadata: ({
              name?: string | number | null;
              description?: string | null;
              image?: string | null;
              external_url?: string | null;
              animation_url?: string | null;
              properties?: unknown;
              attributes?: unknown;
              background_color?: unknown;
            }) | string;
            /** @description The address of the currency to pay for minting the tokens (use the price field to specify the price). Defaults to NATIVE_TOKEN_ADDRESS */
            currencyAddress: string;
            /**
             * @description If you want the user to pay for minting the tokens, you can specify the price per token. Defaults to 0.
             * @default 0
             */
            price: string;
            /** @description The time from which the signature can be used to mint tokens. Defaults to now if value not provided. */
            mintStartTime: number;
            /** @description The time until which the signature can be used to mint tokens. Defaults to 10 years from now. */
            mintEndTime: number;
          };
          signature: string;
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Overwrite the claim conditions for a specific token ID..
   * @description Overwrite the claim conditions for a specific token ID. All properties of a phase are optional, with the default being a free, open, unlimited claim, in the native currency, starting immediately.
   */
  setClaimConditions: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description ID of the token to set the claim conditions for */
          tokenId: string | number;
          claimConditionInputs: ({
              maxClaimableSupply?: string | number;
              startTime?: string | number;
              price?: number | string;
              currencyAddress?: string;
              maxClaimablePerWallet?: number | string;
              waitInSeconds?: number | string;
              merkleRootHash?: string | number[];
              metadata?: {
                name?: string;
              };
              snapshot?: string[] | (({
                  price?: string | number;
                  currencyAddress?: string;
                  address: string;
                  maxClaimable?: string | number;
                })[]) | null;
            })[];
          resetClaimEligibilityForAll?: boolean;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Update a single claim phase.
   * @description Update a single claim phase on a specific token ID, by providing the index of the claim phase and the new phase configuration.
   */
  updateClaimConditions: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Token ID to update claim phase for */
          tokenId: string | number;
          claimConditionInput: {
            maxClaimableSupply?: string | number;
            startTime?: string | number;
            price?: number | string;
            currencyAddress?: string;
            maxClaimablePerWallet?: number | string;
            waitInSeconds?: number | string;
            merkleRootHash?: string | number[];
            metadata?: {
              name?: string;
            };
            snapshot?: string[] | (({
                price?: string | number;
                currencyAddress?: string;
                address: string;
                maxClaimable?: string | number;
              })[]) | null;
          };
          /** @description Index of the claim condition to update */
          index: number;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get owned tokens
   * @description Get all tokens in an ERC-1155 contract owned by a specific wallet.
   */
  getOwned: {
    parameters: {
      query: {
        /**
         * @description Address of the wallet to get NFTs for
         * @example 0x1946267d81Fb8aDeeEa28e6B98bcD446c8248473
         */
        walletAddress: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description ERC1155 Contract Address on the Chain
         * @example 0x19411143085F1ec7D21a7cc07000CBA5188C5e8e
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: ({
                metadata: {
                  id: string;
                  uri: string;
                  name?: string | number | null;
                  description?: string | null;
                  image?: string | null;
                  external_url?: string | null;
                  animation_url?: string | null;
                  properties?: unknown;
                  attributes?: unknown;
                  [key: string]: unknown;
                };
                owner: string;
                type: "ERC1155" | "ERC721" | "metaplex";
                supply: string;
                quantityOwned?: string;
              })[];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Check if approved transfers
   * @description Check if the specific wallet has approved transfers from a specific operator wallet.
   */
  isApproved: {
    parameters: {
      query: {
        /**
         * @description Address of the wallet who owns the NFT
         * @example 0x3EcDBF3B911d0e9052b64850693888b008e18373
         */
        ownerWallet: string;
        /**
         * @description Address of the operator to check approval on
         * @example 0x1946267d81Fb8aDeeEa28e6B98bcD446c8248473
         */
        operator: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description ERC1155 Contract Address on the Chain
         * @example 0x19411143085F1ec7D21a7cc07000CBA5188C5e8e
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result?: boolean;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get total supply
   * @description Get the total supply in circulation for this ERC-1155 contract.
   */
  totalCount: {
    parameters: {
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description ERC1155 Contract Address on the Chain
         * @example 0x19411143085F1ec7D21a7cc07000CBA5188C5e8e
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get claimed supply
   * @description Get the claimed supply for this ERC-721 contract.
   */
  totalClaimedSupply: {
    parameters: {
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get unclaimed supply
   * @description Get the unclaimed supply for this ERC-721 contract.
   */
  totalUnclaimedSupply: {
    parameters: {
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get claim ineligibility reasons
   * @description Get an array of reasons why a specific wallet address is not eligible to claim tokens, if any.
   */
  getClaimIneligibilityReasons: {
    parameters: {
      query: {
        /** @description The token ID of the NFT you want to check if the wallet address can claim. */
        tokenId: string | number;
        /** @description The amount of tokens to claim. */
        quantity: string;
        /**
         * @description The wallet address to check if it can claim tokens.
         * @example 0x1946267d81Fb8aDeeEa28e6B98bcD446c8248473
         */
        addressToCheck?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: (string | ("There is not enough supply to claim." | "This address is not on the allowlist." | "Not enough time since last claim transaction. Please wait." | "Claim phase has not started yet." | "You have already claimed the token." | "Incorrect price or currency." | "Cannot claim more than maximum allowed quantity." | "There are not enough tokens in the wallet to pay for the claim." | "There is no active claim phase at the moment. Please check back in later." | "There is no claim condition set." | "No wallet connected." | "No claim conditions found."))[];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get claimer proofs
   * @description Returns allowlist information and merkle proofs for a given wallet address. Returns null if no proof is found for the given wallet address.
   */
  getClaimerProofs: {
    parameters: {
      query: {
        /** @description The token ID of the NFT you want to get the claimer proofs for. */
        tokenId: string | number;
        /** @description The wallet address to get the merkle proofs for. */
        walletAddress: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: null | {
              price?: string;
              currencyAddress?: string;
              address: string;
              maxClaimable: string;
              proof: string[];
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Set approval for all
   * @description Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.
   */
  setApprovalForAll: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description ERC1155 Contract Address on the Chain
         * @example 0x19411143085F1ec7D21a7cc07000CBA5188C5e8e
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "operator": "0x3EcDBF3B911d0e9052b64850693888b008e18373",
         *   "approved": "true"
         * }
         */
        "application/json": {
          /** @description Address of the operator to give approval to */
          operator: string;
          /** @description whether to approve or revoke approval */
          approved: boolean;
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Set approval for token
   * @description Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specific token.
   */
  setApprovalForToken: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "operator": "0x3EcDBF3B911d0e9052b64850693888b008e18373",
         *   "tokenId": "0"
         * }
         */
        "application/json": {
          /** @description Address of the operator to give approval to */
          operator: string;
          /** @description the tokenId to give approval for */
          tokenId: string;
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Lazy mint
   * @description Lazy mint ERC-1155 tokens to be claimed in the future.
   */
  lazyMint: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description ERC1155 Contract Address on the Chain
         * @example 0x19411143085F1ec7D21a7cc07000CBA5188C5e8e
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "metadatas": [
         *     {
         *       "name": "My NFT #1",
         *       "description": "My NFT #1 description",
         *       "image": "ipfs://QmciR3WLJsf2BgzTSjbG5zCxsrEQ8PqsHK7JWGWsDSNo46/nft.png"
         *     },
         *     {
         *       "name": "My NFT #2",
         *       "description": "My NFT #2 description",
         *       "image": "ipfs://QmciR3WLJsf2BgzTSjbG5zCxsrEQ8PqsHK7JWGWsDSNo46/nft.png"
         *     }
         *   ]
         * }
         */
        "application/json": {
          metadatas: (({
              name?: string | number | null;
              description?: string | null;
              image?: string | null;
              external_url?: string | null;
              animation_url?: string | null;
              properties?: unknown;
              attributes?: unknown;
              background_color?: unknown;
            }) | string)[];
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Prepare signature
   * @description Prepares a payload for a wallet to generate a signature.
   */
  signaturePrepare: {
    parameters: {
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description ERC721 Contract Address on the Chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "to": "0x...",
         *   "quantity": "1",
         *   "metadata": {
         *     "name": "test tokenII",
         *     "description": "test token"
         *   },
         *   "mintStartTime": "2023-06-07T21:51:33.386Z",
         *   "mintEndTime": "2023-07-07T21:51:33.386Z"
         * }
         */
        "application/json": {
          /** @description The wallet address that can use this signature to mint tokens. This is to prevent another wallet from intercepting the signature and using it to mint tokens for themselves. */
          to: string;
          /** @description The address that will receive the royalty fees from secondary sales. Defaults to the royaltyRecipient address of the contract. */
          royaltyRecipient?: string;
          /** @description The number of tokens this signature can be used to mint. */
          quantity?: string;
          /** @description The percentage fee you want to charge for secondary sales. Defaults to the royaltyBps of the contract. */
          royaltyBps?: number;
          /** @description If a price is specified, the funds will be sent to the primarySaleRecipient address. Defaults to the primarySaleRecipient address of the contract. */
          primarySaleRecipient?: string;
          metadata: ({
            name?: string | number | null;
            description?: string | null;
            image?: string | null;
            external_url?: string | null;
            animation_url?: string | null;
            properties?: unknown;
            attributes?: unknown;
            background_color?: unknown;
          }) | string;
          /** @description The address of the currency to pay for minting the tokens (use the price field to specify the price). Defaults to NATIVE_TOKEN_ADDRESS */
          currencyAddress?: string;
          /**
           * @description If you want the user to pay for minting the tokens, you can specify the price per token. Defaults to 0.
           * @default 0
           */
          price?: string;
          mintStartTime?: string | number;
          mintEndTime?: string | number;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              mintPayload: unknown;
              typedDataPayload: {
                domain: {
                  name: string;
                  version: string;
                  chainId: number;
                  verifyingContract: string;
                };
                types: unknown;
                message: unknown;
                primaryType: string;
              };
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Update token metadata
   * @description Update the metadata for an ERC1155 token.
   */
  updateTokenMetadata: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Token ID to update metadata */
          tokenId: string;
          metadata: {
            name?: string | number | null;
            description?: string | null;
            image?: string | null;
            external_url?: string | null;
            animation_url?: string | null;
            properties?: unknown;
            attributes?: unknown;
            background_color?: unknown;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Airdrop tokens
   * @description Airdrop ERC-1155 tokens to specific wallets.
   */
  airdrop: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description ERC1155 Contract Address on the Chain
         * @example 0x19411143085F1ec7D21a7cc07000CBA5188C5e8e
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "tokenId": "0",
         *   "addresses": [
         *     {
         *       "address": "0xE79ee09bD47F4F5381dbbACaCff2040f2FbC5803",
         *       "quantity": "1"
         *     },
         *     {
         *       "address": "0x3EcDBF3B911d0e9052b64850693888b008e18373",
         *       "quantity": "1"
         *     }
         *   ]
         * }
         */
        "application/json": {
          /** @description Token ID of the NFT to airdrop */
          tokenId: string;
          /** @description Addresses and quantities to airdrop to */
          addresses: {
              address: string;
              /** @default 1 */
              quantity: string;
            }[];
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Burn tokens (batch)
   * @description Burn a batch of ERC-1155 tokens in the caller wallet.
   */
  burnBatch: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description ERC1155 Contract Address on the Chain
         * @example 0x19411143085F1ec7D21a7cc07000CBA5188C5e8e
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "tokenIds": [
         *     "0",
         *     "1"
         *   ],
         *   "amounts": [
         *     "1",
         *     "1"
         *   ]
         * }
         */
        "application/json": {
          tokenIds: string[];
          amounts: string[];
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Mint additional supply
   * @description Mint additional supply of ERC-1155 tokens to a specific wallet.
   */
  mintAdditionalSupplyTo: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description ERC1155 Contract Address on the Chain
         * @example 0x19411143085F1ec7D21a7cc07000CBA5188C5e8e
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "receiver": "0x3EcDBF3B911d0e9052b64850693888b008e18373",
         *   "tokenId": "1",
         *   "additionalSupply": "10"
         * }
         */
        "application/json": {
          /** @description Address of the wallet to mint the NFT to */
          receiver: string;
          /** @description Token ID to mint additional supply to */
          tokenId: string;
          /** @description The amount of supply to mint */
          additionalSupply: string;
          txOverrides?: {
            /** @description Amount of native currency to send */
            value?: string;
            /** @description Gas limit for the transaction */
            gas?: string;
            /** @description Maximum fee per gas */
            maxFeePerGas?: string;
            /** @description Maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
          };
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Overwrite the claim conditions for a specific token ID..
   * @description Allows you to set claim conditions for multiple token IDs in a single transaction.
   */
  claimConditionsUpdate: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          claimConditionsForToken: ({
              /** @description ID of the token to set the claim conditions for */
              tokenId: string | number;
              claimConditions: ({
                  maxClaimableSupply?: string | number;
                  startTime?: string | number;
                  price?: number | string;
                  currencyAddress?: string;
                  maxClaimablePerWallet?: number | string;
                  waitInSeconds?: number | string;
                  merkleRootHash?: string | number[];
                  metadata?: {
                    name?: string;
                  };
                  snapshot?: string[] | (({
                      price?: string | number;
                      currencyAddress?: string;
                      address: string;
                      maxClaimable?: string | number;
                    })[]) | null;
                })[];
            })[];
          resetClaimEligibilityForAll?: boolean;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get all valid offers
   * @description Get all valid offers on this marketplace contract. Valid offers are offers that have not expired, been canceled, or been accepted.
   */
  getAllValid: {
    parameters: {
      query?: {
        /** @description Number of listings to fetch */
        count?: number;
        /** @description has offers from this Address */
        offeror?: string;
        /** @description Satrt from this index (pagination) */
        start?: number;
        /** @description Token contract address to show NFTs from */
        tokenContract?: string;
        /** @description Only show NFTs with this ID */
        tokenId?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: ({
                /** @description The address of the asset being listed. */
                assetContractAddress: string;
                /** @description The ID of the token to list. */
                tokenId: string;
                /** @description The address of the currency to accept for the listing. */
                currencyContractAddress?: string;
                /** @description The quantity of tokens to include in the listing. NOTE: For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here). */
                quantity?: string;
                /** @description The id of the offer. */
                id: string;
                /** @description The address of the creator of offer. */
                offerorAddress: string;
                /** @description The `CurrencyValue` of the listing. Useful for displaying the price information. */
                currencyValue?: {
                  name: string;
                  symbol: string;
                  decimals: number;
                  value: string;
                  displayValue: string;
                };
                /** @description The total offer amount for the NFTs. */
                totalPrice: string;
                asset?: {
                  id: string;
                  uri: string;
                  name?: string | number | null;
                  description?: string | null;
                  image?: string | null;
                  external_url?: string | null;
                  animation_url?: string | null;
                  properties?: unknown;
                  attributes?: unknown;
                  [key: string]: unknown;
                };
                /** @description The end time of the auction. */
                endTimeInSeconds?: number;
                status?: 0 | 1 | 2 | 3 | 4 | 5;
              })[];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get direct listing
   * @description Gets a direct listing on this marketplace contract.
   */
  getListing: {
    parameters: {
      query: {
        /** @description The id of the listing to retrieve. */
        listingId: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description The address of the asset being listed. */
              assetContractAddress: string;
              /** @description The ID of the token to list. */
              tokenId: string;
              /** @description The address of the currency to accept for the listing. */
              currencyContractAddress?: string;
              /** @description The quantity of tokens to include in the listing. NOTE: For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here). */
              quantity?: string;
              /** @description The price to pay per unit of NFTs listed. */
              pricePerToken: string;
              /** @description Whether the listing is reserved to be bought from a specific set of buyers. */
              isReservedListing?: boolean;
              /** @description The listing ID. */
              id: string;
              /** @description The `CurrencyValue` of the listing. Useful for displaying the price information. */
              currencyValuePerToken?: {
                name: string;
                symbol: string;
                decimals: number;
                value: string;
                displayValue: string;
              };
              asset?: {
                id: string;
                uri: string;
                name?: string | number | null;
                description?: string | null;
                image?: string | null;
                external_url?: string | null;
                animation_url?: string | null;
                properties?: unknown;
                attributes?: unknown;
                [key: string]: unknown;
              };
              status?: 0 | 1 | 2 | 3 | 4 | 5;
              /** @description The start time of the listing. If not set, defaults to now. */
              startTimeInSeconds?: number;
              /** @description The end time of the listing. If not set, defaults to 7 days from now. */
              endTimeInSeconds?: number;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Check approved buyer
   * @description Check if a buyer is approved to purchase a specific direct listing.
   */
  isBuyerApprovedForListing: {
    parameters: {
      query: {
        /** @description The id of the listing to retrieve. */
        listingId: string;
        /** @description The wallet address of the buyer to check. */
        walletAddress: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: boolean;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Check approved currency
   * @description Check if a currency is approved for a specific direct listing.
   */
  isCurrencyApprovedForListing: {
    parameters: {
      query: {
        /** @description The id of the listing to retrieve. */
        listingId: string;
        /** @description The smart contract address of the ERC20 token to check. */
        currencyContractAddress: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: boolean;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get total count
   * @description Get the total number of offers on this marketplace contract.
   */
  getTotalCount: {
    parameters: {
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get English auction
   * @description Get a specific English auction listing on this marketplace contract.
   */
  getAuction: {
    parameters: {
      query: {
        /** @description The id of the listing to retrieve. */
        listingId: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description The address of the asset being listed. */
              assetContractAddress: string;
              /** @description The ID of the token to list. */
              tokenId: string;
              /** @description The address of the currency to accept for the listing. */
              currencyContractAddress?: string;
              /** @description The quantity of tokens to include in the listing. NOTE: For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here). */
              quantity?: string;
              /** @description The listing ID. */
              id: string;
              /** @description The minimum price that a bid must be in order to be accepted. */
              minimumBidAmount?: string;
              /** @description The buyout price of the auction. */
              buyoutBidAmount: string;
              /** @description The `CurrencyValue` of the listing. Useful for displaying the price information. */
              buyoutCurrencyValue: {
                name?: string;
                symbol?: string;
                decimals?: number;
                value?: string;
                displayValue?: string;
              };
              /** @description This is a buffer e.g. x seconds. */
              timeBufferInSeconds: number;
              /** @description To be considered as a new winning bid, a bid must be at least x% greater than the previous bid. */
              bidBufferBps: number;
              /** @description The start time of the auction. */
              startTimeInSeconds: number;
              /** @description The end time of the auction. */
              endTimeInSeconds: number;
              asset?: {
                id: string;
                uri: string;
                name?: string | number | null;
                description?: string | null;
                image?: string | null;
                external_url?: string | null;
                animation_url?: string | null;
                properties?: unknown;
                attributes?: unknown;
                [key: string]: unknown;
              };
              status?: 0 | 1 | 2 | 3 | 4 | 5;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get bid buffer BPS
   * @description Get the basis points of the bid buffer.
   * This is the percentage higher that a new bid must be than the current highest bid in order to be placed.
   * If there is no current bid, the bid must be at least the minimum bid amount.
   * Returns the value in percentage format, e.g. 100 = 1%.
   */
  getBidBufferBps: {
    parameters: {
      query: {
        /** @description The id of the listing to retrieve. */
        listingId: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            /** @description Returns a number representing the basis points of the bid buffer. */
            result: number;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get minimum next bid
   * @description Helper function to calculate the value that the next bid must be in order to be accepted.
   * If there is no current bid, the bid must be at least the minimum bid amount.
   * If there is a current bid, the bid must be at least the current bid amount + the bid buffer.
   */
  getMinimumNextBid: {
    parameters: {
      query: {
        /** @description The id of the listing to retrieve. */
        listingId: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            /** @description The `CurrencyValue` of the listing. Useful for displaying the price information. */
            result: {
              name: string;
              symbol: string;
              decimals: number;
              value: string;
              displayValue: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get winning bid
   * @description Get the current highest bid of an active auction.
   */
  getWinningBid: {
    parameters: {
      query: {
        /** @description The ID of the listing to retrieve the winner for. */
        listingId: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result?: {
              /** @description The id of the auction. */
              auctionId?: string;
              /** @description The address of the buyer who made the offer. */
              bidderAddress?: string;
              /** @description The currency contract address of the offer token. */
              currencyContractAddress?: string;
              /** @description The amount of coins offered per token. */
              bidAmount?: string;
              /** @description The `CurrencyValue` of the listing. Useful for displaying the price information. */
              bidAmountCurrencyValue?: {
                name?: string;
                symbol?: string;
                decimals?: number;
                value?: string;
                displayValue?: string;
              };
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Check winning bid
   * @description Check if a bid is or will be the winning bid for an auction.
   */
  isWinningBid: {
    parameters: {
      query: {
        /** @description The ID of the listing to retrieve the winner for. */
        listingId: string;
        /** @description The amount of the bid to check if it is the winning bid. */
        bidAmount: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: boolean;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get winner
   * @description Get the winner of an English auction. Can only be called after the auction has ended.
   */
  getWinner: {
    parameters: {
      query: {
        /** @description The ID of the listing to retrieve the winner for. */
        listingId: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get offer
   * @description Get details about an offer.
   */
  getOffer: {
    parameters: {
      query: {
        /** @description The ID of the offer to get information about. */
        offerId: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description The address of the asset being listed. */
              assetContractAddress: string;
              /** @description The ID of the token to list. */
              tokenId: string;
              /** @description The address of the currency to accept for the listing. */
              currencyContractAddress?: string;
              /** @description The quantity of tokens to include in the listing. NOTE: For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here). */
              quantity?: string;
              /** @description The id of the offer. */
              id: string;
              /** @description The address of the creator of offer. */
              offerorAddress: string;
              /** @description The `CurrencyValue` of the listing. Useful for displaying the price information. */
              currencyValue?: {
                name: string;
                symbol: string;
                decimals: number;
                value: string;
                displayValue: string;
              };
              /** @description The total offer amount for the NFTs. */
              totalPrice: string;
              asset?: {
                id: string;
                uri: string;
                name?: string | number | null;
                description?: string | null;
                image?: string | null;
                external_url?: string | null;
                animation_url?: string | null;
                properties?: unknown;
                attributes?: unknown;
                [key: string]: unknown;
              };
              /** @description The end time of the auction. */
              endTimeInSeconds?: number;
              status?: 0 | 1 | 2 | 3 | 4 | 5;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Create direct listing
   * @description Create a direct listing on this marketplace contract.
   */
  createListing: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "assetContractAddress": "0x19411143085F1ec7D21a7cc07000CBA5188C5e8e",
         *   "tokenId": "0",
         *   "pricePerToken": "0.00000001",
         *   "isReservedListing": false,
         *   "quantity": "1",
         *   "startTimestamp": 1686006043038,
         *   "endTimestamp": 1686610889058
         * }
         */
        "application/json": {
          /** @description The address of the asset being listed. */
          assetContractAddress: string;
          /** @description The ID of the token to list. */
          tokenId: string;
          /** @description The address of the currency to accept for the listing. */
          currencyContractAddress?: string;
          /** @description The quantity of tokens to include in the listing. NOTE: For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here). */
          quantity?: string;
          /** @description The price to pay per unit of NFTs listed. */
          pricePerToken: string;
          /** @description Whether the listing is reserved to be bought from a specific set of buyers. */
          isReservedListing?: boolean;
          /** @description The start time of the listing. If not set, defaults to now. */
          startTimestamp?: number;
          /** @description The end time of the listing. If not set, defaults to 7 days from now. */
          endTimestamp?: number;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Update direct listing
   * @description Update a direct listing on this marketplace contract.
   */
  updateListing: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example {
         *   "listingId": "0"
         * }
         */
        "application/json": {
          /** @description The ID of the listing you want to update. */
          listingId: string;
        } & {
          /** @description The address of the asset being listed. */
          assetContractAddress: string;
          /** @description The ID of the token to list. */
          tokenId: string;
          /** @description The address of the currency to accept for the listing. */
          currencyContractAddress?: string;
          /** @description The quantity of tokens to include in the listing. NOTE: For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here). */
          quantity?: string;
          /** @description The price to pay per unit of NFTs listed. */
          pricePerToken: string;
          /** @description Whether the listing is reserved to be bought from a specific set of buyers. */
          isReservedListing?: boolean;
          /** @description The start time of the listing. If not set, defaults to now. */
          startTimestamp?: number;
          /** @description The end time of the listing. If not set, defaults to 7 days from now. */
          endTimestamp?: number;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Buy from direct listing
   * @description Buy from a specific direct listing from this marketplace contract.
   */
  buyFromListing: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "listingId": "0",
         *   "quantity": "1",
         *   "buyer": "0x19411143085F1ec7D21a7cc07000CBA5188C5e8e"
         * }
         */
        "application/json": {
          /** @description The ID of the listing you want to approve a buyer for. */
          listingId: string;
          /** @description The number of tokens to buy (default is 1 for ERC721 NFTs). */
          quantity: string;
          /** @description The wallet address of the buyer. */
          buyer: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Approve buyer for reserved listing
   * @description Approve a wallet address to buy from a reserved listing.
   */
  approveBuyerForReservedListing: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "listingId": "0",
         *   "buyer": "0x19411143085F1ec7D21a7cc07000CBA5188C5e8e"
         * }
         */
        "application/json": {
          /** @description The ID of the listing you want to approve a buyer for. */
          listingId: string;
          /** @description The wallet address of the buyer to approve. */
          buyer: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Revoke approval for reserved listings
   * @description Revoke approval for a buyer to purchase a reserved listing.
   */
  revokeBuyerApprovalForReservedListing: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "listingId": "0",
         *   "buyerAddress": "0x19411143085F1ec7D21a7cc07000CBA5188C5e8e"
         * }
         */
        "application/json": {
          /** @description The ID of the listing you want to approve a buyer for. */
          listingId: string;
          /** @description The wallet address of the buyer to approve. */
          buyerAddress: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Revoke currency approval for reserved listing
   * @description Revoke approval of a currency for a reserved listing.
   */
  revokeCurrencyApprovalForListing: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "listingId": "0",
         *   "currencyContractAddress": "0x19411143085F1ec7D21a7cc07000CBA5188C5e8e"
         * }
         */
        "application/json": {
          /** @description The ID of the listing you want to approve a buyer for. */
          listingId: string;
          /** @description The wallet address of the buyer to approve. */
          currencyContractAddress: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Cancel direct listing
   * @description Cancel a direct listing from this marketplace contract. Only the creator of the listing can cancel it.
   */
  cancelListing: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "listingId": "0"
         * }
         */
        "application/json": {
          /** @description The ID of the listing you want to cancel. */
          listingId: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Buyout English auction
   * @description Buyout the listing for this auction.
   */
  buyoutAuction: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "listingId": "0"
         * }
         */
        "application/json": {
          /** @description The ID of the listing to buy NFT(s) from. */
          listingId: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Cancel English auction
   * @description Cancel an existing auction listing. Only the creator of the listing can cancel it. Auctions cannot be canceled once a bid has been made.
   */
  cancelAuction: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "listingId": "0"
         * }
         */
        "application/json": {
          /** @description The ID of the listing to cancel auction. */
          listingId: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Create English auction
   * @description Create an English auction listing on this marketplace contract.
   */
  createAuction: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "assetContractAddress": "0x19411143085F1ec7D21a7cc07000CBA5188C5e8e",
         *   "tokenId": "0",
         *   "quantity": "1",
         *   "startTimestamp": 1686006043038,
         *   "endTimestamp": 1686610889058,
         *   "buyoutBidAmount": "0.00000001",
         *   "minimumBidAmount": "0.00000001",
         *   "currencyContractAddress": "0x...",
         *   "bidBufferBps": 100,
         *   "timeBufferInSeconds": 600
         * }
         */
        "application/json": {
          /** @description The address of the asset being listed. */
          assetContractAddress: string;
          /** @description The ID of the token to list. */
          tokenId: string;
          /** @description The address of the currency to accept for the listing. */
          currencyContractAddress?: string;
          /** @description The quantity of tokens to include in the listing. NOTE: For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here). */
          quantity?: string;
          /** @description The start time of the listing. If not set, defaults to now. */
          startTimestamp?: number;
          /** @description The end time of the listing. If not set, defaults to 7 days from now. */
          endTimestamp?: number;
          /** @description amount to buy the NFT and close the listing. */
          buyoutBidAmount: string;
          /** @description Minimum amount that bids must be to placed */
          minimumBidAmount: string;
          /** @description percentage the next bid must be higher than the current highest bid (default is contract-level bid buffer bps) */
          bidBufferBps?: string;
          /** @description time in seconds that are added to the end time when a bid is placed (default is contract-level time buffer in seconds) */
          timeBufferInSeconds?: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Close English auction for bidder
   * @description After an auction has concluded (and a buyout did not occur),
   * execute the sale for the buyer, meaning the buyer receives the NFT(s).
   * You must also call closeAuctionForSeller to execute the sale for the seller,
   * meaning the seller receives the payment from the highest bid.
   */
  closeAuctionForBidder: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "listingId": "0"
         * }
         */
        "application/json": {
          /** @description The ID of the listing to execute the sale for. */
          listingId: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Close English auction for seller
   * @description After an auction has concluded (and a buyout did not occur),
   * execute the sale for the seller, meaning the seller receives the payment from the highest bid.
   * You must also call closeAuctionForBidder to execute the sale for the buyer, meaning the buyer receives the NFT(s).
   */
  closeAuctionForSeller: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "listingId": "0"
         * }
         */
        "application/json": {
          /** @description The ID of the listing to execute the sale for. */
          listingId: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Execute sale
   * @description Close the auction for both buyer and seller.
   * This means the NFT(s) will be transferred to the buyer and the seller will receive the funds.
   * This function can only be called after the auction has ended.
   */
  executeSale: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "listingId": "0"
         * }
         */
        "application/json": {
          /** @description The ID of the listing to execute the sale for. */
          listingId: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Make bid
   * @description Place a bid on an English auction listing.
   */
  makeBid: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "listingId": "0",
         *   "bidAmount": "0.00000001"
         * }
         */
        "application/json": {
          /** @description The ID of the listing to place a bid on. */
          listingId: string;
          /** @description The amount of the bid to place in the currency of the listing. Use getNextBidAmount to get the minimum amount for the next bid. */
          bidAmount: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Make offer
   * @description Make an offer on a token. A valid listing is not required.
   */
  makeOffer: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "assetContractAddress": "0x19411143085F1ec7D21a7cc07000CBA5188C5e8e",
         *   "tokenId": "0",
         *   "quantity": "1",
         *   "endTimestamp": 1686610889058,
         *   "currencyContractAddress": "0x...",
         *   "totalPrice": "0.00000001"
         * }
         */
        "application/json": {
          /** @description The address of the asset being listed. */
          assetContractAddress: string;
          /** @description The ID of the token to list. */
          tokenId: string;
          /** @description The address of the currency to accept for the listing. */
          currencyContractAddress?: string;
          /** @description The quantity of tokens to include in the listing. NOTE: For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here). */
          quantity?: string;
          /** @description the price to offer in the currency specified */
          totalPrice: string;
          /** @description Defaults to 10 years from now. */
          endTimestamp?: number;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Cancel offer
   * @description Cancel a valid offer made by the caller wallet.
   */
  cancelOffer: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "offerId": "1"
         * }
         */
        "application/json": {
          /** @description The ID of the offer to cancel. You can view all offers with getAll or getAllValid. */
          offerId: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Accept offer
   * @description Accept a valid offer.
   */
  acceptOffer: {
    parameters: {
      query?: {
        /** @description Simulate the transaction on-chain without executing */
        simulateTx?: boolean;
      };
      header: {
        /** @description Backend wallet address */
        "x-backend-wallet-address": string;
        /** @description Smart account address */
        "x-account-address"?: string;
        /** @description A string that uniquely identifies this transaction. Submitting the same idempotency key will not enqueue a new transaction for 24 hours. */
        "x-idempotency-key"?: string;
      };
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract Address on the Chain
         * @example 0xE8Bf1a01106F3acD7F84acaf5D668D7C9eA11535
         */
        contractAddress: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "offerId": "1"
         * }
         */
        "application/json": {
          /** @description The ID of the offer to accept. You can view all offers with getAll or getAllValid. */
          offerId: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              /** @description Queue ID */
              queueId: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get contract subscriptions
   * @description Get all contract subscriptions.
   */
  getContractSubscriptions: {
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: ({
                id: string;
                chainId: number;
                contractAddress: string;
                webhook?: {
                  url: string;
                  name: string | null;
                  secret?: string;
                  eventType: string;
                  active: boolean;
                  createdAt: string;
                  id: number;
                };
                /** Format: date */
                createdAt: string;
              })[];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Add contract subscription
   * @description Subscribe to event logs and transaction receipts for a contract.
   */
  addContractSubscription: {
    requestBody: {
      content: {
        "application/json": {
          /** @description The chain for the contract. */
          chain: string;
          /** @description The address for the contract. */
          contractAddress: string;
          /** @description Webhook URL */
          webhookUrl?: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              id: string;
              chainId: number;
              contractAddress: string;
              webhook?: {
                url: string;
                name: string | null;
                secret?: string;
                eventType: string;
                active: boolean;
                createdAt: string;
                id: number;
              };
              /** Format: date */
              createdAt: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Remove contract subscription
   * @description Remove an existing contract subscription
   */
  removeContractSubscription: {
    requestBody: {
      content: {
        "application/json": {
          /** @description The ID for an existing contract subscription. */
          contractSubscriptionId: string;
        };
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              status: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get subscribed contract indexed block range
   * @description Gets the subscribed contract's indexed block range
   */
  getContractIndexedBlockRange: {
    parameters: {
      path: {
        /**
         * @description Chain ID or name
         * @example mumbai
         */
        chain: string;
        /**
         * @description Contract address on the chain
         * @example 0xc8be6265C06aC376876b4F62670adB3c4d72EABA
         */
        contractAddress: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              chain: string;
              contractAddress: string;
              fromBlock: number;
              toBlock: number;
              status: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Get last processed block
   * @description Get the last processed block for a chain.
   */
  getLatestBlock: {
    parameters: {
      query: {
        /** @description Chain name or ID */
        chain: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": {
            result: {
              lastBlock: number;
              status: string;
            };
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            error?: {
              message?: string;
              reason?: string;
              code?: string;
              stack?: string;
              statusCode?: number;
            };
          };
        };
      };
    };
  };
}
